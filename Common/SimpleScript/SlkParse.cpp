
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = {0

,2,44,45 ,3,45,46,94 ,3,46,63,130 ,3,47,64,130 ,3,48,65,130 
,3,49,66,130 ,3,50,67,130 ,3,51,68,130 ,3,52,69,130 
,3,53,70,130 ,3,54,71,130 ,3,55,72,130 ,3,56,73,130 
,3,57,74,130 ,3,58,75,130 ,3,59,76,130 ,3,60,77,130 
,3,61,78,130 ,3,62,79,130 ,3,63,64,95 ,3,64,65,96 
,3,65,66,97 ,3,66,67,98 ,3,67,68,99 ,3,68,69,100 
,3,69,70,101 ,3,70,71,102 ,3,71,72,103 ,3,72,73,104 
,3,73,74,105 ,3,74,75,106 ,3,75,76,107 ,3,76,77,108 
,3,77,78,109 ,3,78,79,110 ,3,79,81,111 ,3,80,81,130 
,3,81,135,82 ,2,82,112 ,5,82,136,84,137,113 ,4,83,92,138,114 
,2,84,85 ,6,85,139,18,45,19,115 ,6,85,141,20,45,21,116 
,4,85,22,86,117 ,4,85,23,87,118 ,6,85,142,24,45,19,119 
,6,85,143,25,45,21,120 ,6,85,144,26,45,27,121 ,4,85,28,88,122 
,4,85,29,89,123 ,4,85,30,90,124 ,4,85,31,91,125 ,6,85,145,32,45,27,126 
,5,85,146,33,147,127 ,6,85,148,34,45,35,128 ,6,85,149,36,45,37,129 
,8,86,150,135,136,92,151,137,130 ,5,86,152,18,45,19 ,5,86,153,20,45,21 
,5,86,154,32,45,27 ,8,87,155,135,136,92,151,137,130 ,8,88,156,135,136,92,151,137,130 
,8,89,157,135,136,92,151,137,130 ,8,90,158,135,136,92,151,137,130 
,8,91,159,135,136,92,151,137,130 ,3,92,38,131 ,3,92,39,160 
,3,92,40,161 ,2,93,41 ,2,93,42 ,4,94,93,46,94 ,1,94 
,6,95,1,131,132,47,95 ,1,95 ,6,96,2,131,132,48,96 
,1,96 ,6,97,3,131,132,49,97 ,1,97 ,10,98,4,131,133,50,4,131,134,50,98 
,1,98 ,6,99,5,131,132,51,99 ,1,99 ,6,100,6,131,132,52,100 
,1,100 ,6,101,7,131,132,53,101 ,1,101 ,6,102,8,131,132,54,102 
,1,102 ,6,103,9,131,132,55,103 ,1,103 ,6,104,10,131,132,56,104 
,1,104 ,6,105,11,131,132,57,105 ,1,105 ,6,106,12,131,132,58,106 
,1,106 ,6,107,13,131,132,59,107 ,1,107 ,6,108,14,131,132,60,108 
,1,108 ,6,109,15,131,132,61,109 ,1,109 ,6,110,16,131,132,62,110 
,1,110 ,6,111,17,131,132,80,111 ,1,111 ,5,112,136,83,137,112 
,1,112 ,5,113,136,83,137,113 ,1,113 ,2,114,85 ,1,114 ,3,115,140,85 
,1,115 ,3,116,140,85 ,1,116 ,3,117,140,85 ,1,117 ,3,118,140,85 
,1,118 ,3,119,140,85 ,1,119 ,3,120,140,85 ,1,120 ,3,121,140,85 
,1,121 ,3,122,140,85 ,1,122 ,3,123,140,85 ,1,123 ,3,124,140,85 
,1,124 ,3,125,140,85 ,1,125 ,3,126,140,85 ,1,126 ,3,127,140,85 
,1,127 ,3,128,140,85 ,1,128 ,3,129,140,85 ,1,129 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,155,161,166,169,176,183,188,193,200
,207,214,219,224,229,234,241,247,254,261,270,276,282,288,297,306
,315,324,333,337,341,345,348,351,356,358,365,367,374,376,383,385
,396,398,405,407,414,416,423,425,432,434,441,443,450,452,459,461
,468,470,477,479,486,488,495,497,504,506,513,515,521,523,529,531
,534,536,540,542,546,548,552,554,558,560,564,566,570,572,576,578
,582,584,588,590,594,596,600,602,606,608,612,614,618,620,624
,0};

static slk_size_t Parse[] = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,40,39,40,39,40,40,40,40,40
,39,40,40,40,40,40,40,40,39,40,39,39,39,39,39,39,39,113,113,113
,113,113,113,113,113,113,113,113,113,113,113,113,113,113,112,113,112,113,112,112
,112,112,112,113,112,112,112,112,112,112,112,113,112,113,113,113,113,113,113,113
,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,114,115,114
,115,114,114,114,114,114,115,114,114,114,114,114,114,114,115,114,115,115,115,115
,115,115,115,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117
,116,117,116,117,116,116,116,116,116,117,116,116,116,116,116,116,116,117,116,117
,117,117,117,117,117,117,119,119,119,119,119,119,119,119,119,119,119,119,119,119
,119,119,119,118,119,118,119,118,118,118,118,118,119,118,118,118,118,118,118,118
,119,118,119,119,119,119,119,119,119,121,121,121,121,121,121,121,121,121,121,121
,121,121,121,121,121,121,120,121,120,121,120,120,120,120,120,121,120,120,120,120
,120,120,120,121,120,121,121,121,121,121,121,121,123,123,123,123,123,123,123,123
,123,123,123,123,123,123,123,123,123,122,123,122,123,122,122,122,122,122,123,122
,122,122,122,122,122,122,123,122,123,123,123,123,123,123,123,125,125,125,125,125
,125,125,125,125,125,125,125,125,125,125,125,125,124,125,124,125,124,124,124,124
,124,125,124,124,124,124,124,124,124,125,124,125,125,125,125,125,125,125,127,127
,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,126,127,126,127,126
,126,126,126,126,127,126,126,126,126,126,126,126,127,126,127,127,127,127,127,127
,127,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,128,129
,128,129,128,128,128,128,128,129,128,128,128,128,128,128,128,129,128,129,129,129
,129,129,129,129,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131
,131,130,131,130,131,130,130,130,130,130,131,130,130,130,130,130,130,130,131,130
,131,131,131,131,131,131,131,133,133,133,133,133,133,133,133,133,133,133,133,133
,133,133,133,133,132,133,132,133,132,132,132,132,132,133,132,132,132,132,132,132
,132,133,132,133,133,133,133,133,133,133,135,135,135,135,135,135,135,135,135,135
,135,135,135,135,135,135,135,134,135,134,135,134,134,134,134,134,135,134,134,134
,134,134,134,134,135,134,135,135,135,135,135,135,135,137,137,137,137,137,137,137
,137,137,137,137,137,137,137,137,137,137,136,137,136,137,136,136,136,136,136,137
,136,136,136,136,136,136,136,137,136,137,137,137,137,137,137,137,139,139,139,139
,139,139,139,139,139,139,139,139,139,139,139,139,139,138,139,138,139,138,138,138
,138,138,139,138,138,138,138,138,138,138,139,138,139,139,139,139,139,139,139,141
,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,140,141,140,141
,140,140,140,140,140,141,140,140,140,140,140,140,140,141,140,141,141,141,141,141
,141,141,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,142
,143,142,143,142,142,142,142,142,143,142,142,142,142,142,142,142,143,142,143,143
,143,143,143,143,143,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0
,1,0,1,1,1,1,1,1,109,109,109,109,109,109,109,109,109,109,109,109
,109,109,109,109,109,42,109,42,109,42,42,42,42,42,109,42,42,42,42,42
,42,42,109,42,109,108,108,108,109,109,109,111,111,111,111,111,111,111,111,111
,111,111,111,111,111,111,111,111,43,111,44,111,45,46,47,48,49,111,50,51
,52,53,54,55,56,111,57,111,110,110,110,111,111,111,107,107,107,107,107,107
,107,107,107,107,107,107,107,107,107,107,106,59,107,60,107,41,41,41,70,71
,107,62,62,62,0,61,0,0,107,0,107,58,58,58,107,107,107,105,105,105
,105,105,105,105,105,105,105,105,105,105,105,105,104,0,0,105,0,105,63,63
,63,0,0,105,64,64,64,65,65,65,0,105,0,105,66,66,66,105,105,105
,103,103,103,103,103,103,103,103,103,103,103,103,103,103,102,73,0,73,103,0
,103,0,0,73,0,0,103,67,68,69,0,73,0,73,103,0,103,72,72,73
,103,103,103,101,101,101,101,101,101,101,101,101,101,101,101,101,100,0,0,0
,0,101,0,101,0,0,0,0,0,101,0,0,0,0,0,0,0,101,0,101
,0,0,0,101,101,101,99,99,99,99,99,99,99,99,99,99,99,99,98,0
,0,0,0,0,99,0,99,0,0,0,0,0,99,0,0,0,0,0,0,0
,99,0,99,0,0,0,99,99,99,97,97,97,97,97,97,97,97,97,97,97
,96,0,0,0,0,0,0,97,0,97,0,0,0,0,0,97,0,0,0,0
,0,0,0,97,0,97,0,0,0,97,97,97,95,95,95,95,95,95,95,95
,95,95,94,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,95,0
,0,0,0,0,0,0,95,0,95,0,0,0,95,95,95,93,93,93,93,93
,93,93,93,93,92,0,0,0,0,0,0,0,0,93,0,93,0,0,0,0
,0,93,0,0,0,0,0,0,0,93,0,93,0,0,0,93,93,93,91,91
,91,91,91,91,91,91,90,89,89,89,89,89,89,89,88,0,91,0,91,0
,0,0,0,0,91,89,0,89,0,0,0,0,91,89,91,0,0,0,91,91
,91,89,0,89,0,0,0,89,89,89,87,87,87,87,87,87,86,0,0,85
,85,85,85,85,84,0,0,0,87,0,87,0,0,0,0,0,87,85,0,85
,0,0,0,0,87,85,87,0,0,0,87,87,87,85,0,85,0,0,0,85
,85,85,83,83,83,83,82,0,0,0,0,81,81,81,80,0,0,0,0,0
,83,0,83,0,0,0,0,0,83,81,0,81,0,0,0,0,83,81,83,79
,79,78,83,83,83,81,0,81,77,76,0,81,81,81,0,0,0,79,0,79
,0,0,0,0,0,79,77,74,77,0,0,0,0,79,77,79,0,0,0,79
,79,79,77,0,77,75,0,75,77,77,77,0,0,75,0,0,0,0,0,0
,0,75,0,75,0,0,0,75,75,75
};

static slk_size_t Parse_row[] = {0

,2323,1,44,87,130,173,216,259,302,345,388,431,474,517,560,603
,646,689,732,775,818,861,904,947,990,1033,1076,1119,1162,1205,1248,1291
,1334,1377,1420,1463,1506,1549,1592,2436,2366,2409,2452,2442,2479,2485,2488,2495
,2528,2436,2535,2965,2946,2937,2909,2900,2857,2848,2805,2796,2753,2710,2667,2624
,2581,2538,2495,2452,2366,2409,1635,1678,1721,1764,1807,1850,1893,1936,1979,2022
,2065,2108,2151,2194,2237,2280
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 44
#define END_OF_SLK_INPUT_ 43
#define START_STATE 0
#define START_CONFLICT 144
#define END_CONFLICT 144
#define START_ACTION 130
#define END_ACTION 162
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 65535
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) *--top = symbol
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)            self.peek(a)
#define get(self)               self.get()
#define mismatch(self,a,b)      self.mismatch(a,b)
#define no_entry(self,a,b,c)    self.no_entry(a,b,c)
#define input_left(self)        self.input_left()
#define message(self,a)         self.message(a)
#define predict(self,a)         self.predict(a)
#define reduce(self,a)          self.reduce(a)
#define state(self,a)           self.state(a)
#define execute(self,a)         self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType ( slk_size_t symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

slk_size_t *SlkGetProductionArray ( slk_size_t   production_number )
{
    return   &Production [ Production_row [production_number] ];
}

int SlkIsNonterminal ( slk_size_t symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

int SlkIsTerminal ( slk_size_t symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

int SlkIsAction ( slk_size_t symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

void SlkParse ( SlkAction  &action, 
                SlkToken   &tokens, 
                SlkError   &error, 
                slk_size_t  start_symbol ) 
{
 register
 slk_size_t  *top, *production;
 slk_size_t   production_number, entry, symbol, token, new_token;
 int          production_length, index, level;
 slk_size_t   stack [ PARSE_STACK_SIZE ];

 top = stack + (PARSE_STACK_SIZE-1);
 *top = 0;
 if ( ! start_symbol ) {
     start_symbol = START_SYMBOL;
 }
 SLK_PUSH ( start_symbol, stack, top );
 token = get(tokens);
 new_token = token;

 for ( symbol = SLK_POP ( top );  symbol;  ) {

     if ( symbol >= START_ACTION ) {
         execute ( action, (symbol-(START_ACTION-1)) );

     } else if ( symbol >= START_SYMBOL ) {
         entry = 0;
         level = 1;
         production_number = GET_CONDITIONAL_PRODUCTION ( symbol );
         if ( production_number ) {
             entry = get_predicted_entry ( tokens,
                                           production_number, token,
                                           level, 1 );
         }
         if ( ! entry ) {
             index = Parse_row [symbol - (START_SYMBOL-1)];
             index += token;
             entry = Parse [ index ];
         }
         while ( entry >= START_CONFLICT ) {
             index = Conflict_row [entry - (START_CONFLICT -1)];
             index += peek (tokens, level);
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry ) {
             production = &Production [ Production_row [entry] ];
             production_length = *production - 1;
             if ( *++production == symbol ) {
                 predict ( action, entry );
                 production += production_length;
                 for (;  production_length-- > 0;  --production ) {
                     SLK_PUSH ( *production, stack, top );
                 }
             } else {
                 new_token = no_entry ( error, symbol, token, level-1 );
             }
         } else {
             new_token = no_entry ( error, symbol, token, level-1 );
         }
     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = get(tokens);
             new_token = token;
         } else {
             new_token = mismatch ( error, symbol, token );
         }
     }
     if ( token != new_token ) {
         if ( new_token ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }
     symbol = SLK_POP ( top );
 }
 if ( token != END_OF_SLK_INPUT_ ) {
     input_left ( error );
 }
}

