
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = {0

,2,42,43 ,3,43,44,93 ,3,44,61,124 ,3,45,62,124 ,3,46,63,124 
,3,47,64,124 ,3,48,65,124 ,3,49,66,124 ,3,50,67,124 
,3,51,68,124 ,3,52,69,124 ,3,53,70,124 ,3,54,71,124 
,3,55,72,124 ,3,56,73,124 ,3,57,74,124 ,3,58,75,124 
,3,59,76,124 ,3,60,77,124 ,3,61,62,94 ,3,62,63,95 
,3,63,64,96 ,3,64,65,97 ,3,65,66,98 ,3,66,67,99 
,3,67,68,100 ,3,68,69,101 ,3,69,70,102 ,3,70,71,103 
,3,71,72,104 ,3,72,73,105 ,3,73,74,106 ,3,74,75,107 
,3,75,76,108 ,3,76,77,109 ,3,77,79,110 ,3,78,79,124 
,3,79,130,80 ,2,80,111 ,5,80,131,82,132,112 ,5,81,91,133,113,114 
,3,82,84,115 ,2,82,83 ,5,83,134,18,43,19 ,4,83,135,20,136 
,6,84,137,21,43,22,116 ,6,84,139,23,43,24,117 ,5,84,140,25,85,118 
,5,84,141,26,86,119 ,6,84,141,142,27,43,22 ,6,84,141,143,28,43,24 
,6,84,141,144,29,43,19 ,5,84,145,30,87,120 ,5,84,140,31,88,121 
,5,84,141,32,89,122 ,5,84,145,33,90,123 ,8,85,146,130,131,91,147,132,124 
,5,85,148,21,43,22 ,5,85,149,23,43,24 ,5,85,150,18,43,19 
,8,86,151,130,131,91,147,132,124 ,8,87,152,130,131,91,147,132,124 
,8,88,153,130,131,91,147,132,124 ,8,89,154,130,131,91,147,132,124 
,8,90,155,130,131,91,147,132,124 ,3,91,34,126 ,3,91,35,156 
,3,91,36,157 ,3,91,37,158 ,3,91,38,159 ,2,92,39 ,2,92,40 
,4,93,92,44,93 ,1,93 ,7,94,125,1,126,127,45,94 ,1,94 
,7,95,125,2,126,127,46,95 ,1,95 ,7,96,125,3,126,127,47,96 
,1,96 ,11,97,125,4,126,128,48,4,126,129,48,97 ,1,97 
,7,98,125,5,126,127,49,98 ,1,98 ,7,99,125,6,126,127,50,99 
,1,99 ,7,100,125,7,126,127,51,100 ,1,100 ,7,101,125,8,126,127,52,101 
,1,101 ,7,102,125,9,126,127,53,102 ,1,102 ,7,103,125,10,126,127,54,103 
,1,103 ,7,104,125,11,126,127,55,104 ,1,104 ,7,105,125,12,126,127,56,105 
,1,105 ,7,106,125,13,126,127,57,106 ,1,106 ,7,107,125,14,126,127,58,107 
,1,107 ,7,108,125,15,126,127,59,108 ,1,108 ,7,109,125,16,126,127,60,109 
,1,109 ,7,110,125,17,126,127,78,110 ,1,110 ,5,111,131,81,132,111 
,1,111 ,5,112,131,81,132,112 ,1,112 ,2,113,84 ,1,113 ,2,114,83 
,1,114 ,2,115,83 ,1,115 ,3,116,138,84 ,1,116 ,3,117,138,84 
,1,117 ,3,118,138,84 ,1,118 ,3,119,138,84 ,1,119 ,3,120,138,84 
,1,120 ,3,121,138,84 ,1,121 ,3,122,138,84 ,1,122 ,3,123,138,84 
,1,123 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,155,161,167,171,174,180,185,192,199
,205,211,218,225,232,238,244,250,256,265,271,277,283,292,301,310
,319,328,332,336,340,344,348,351,354,359,361,369,371,379,381,389
,391,403,405,413,415,423,425,433,435,443,445,453,455,463,465,473
,475,483,485,493,495,503,505,513,515,523,525,533,535,541,543,549
,551,554,556,559,561,564,566,570,572,576,578,582,584,588,590,594
,596,600,602,606,608,612
,0};

static slk_size_t Parse[] = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,39,40
,40,39,40,39,40,40,40,40,40,40,40,40,40,39,39,39,39,39,39,39
,39,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114
,114,113,114,113,114,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114
,114,114,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120
,120,120,119,120,119,120,119,119,119,119,119,119,119,119,119,120,120,120,120,120
,120,120,120,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122
,122,122,122,121,122,121,122,121,121,121,121,121,121,121,121,121,122,122,122,122
,122,122,122,122,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124
,124,124,124,124,123,124,123,124,123,123,123,123,123,123,123,123,123,124,124,124
,124,124,124,124,124,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126
,126,126,126,126,126,125,126,125,126,125,125,125,125,125,125,125,125,125,126,126
,126,126,126,126,126,126,128,128,128,128,128,128,128,128,128,128,128,128,128,128
,128,128,128,128,128,128,127,128,127,128,127,127,127,127,127,127,127,127,127,128
,128,128,128,128,128,128,128,130,130,130,130,130,130,130,130,130,130,130,130,130
,130,130,130,130,130,130,130,129,130,129,130,129,129,129,129,129,129,129,129,129
,130,130,130,130,130,130,130,130,132,132,132,132,132,132,132,132,132,132,132,132
,132,132,132,132,132,132,132,132,131,132,131,132,131,131,131,131,131,131,131,131
,131,132,132,132,132,132,132,132,132,134,134,134,134,134,134,134,134,134,134,134
,134,134,134,134,134,134,134,134,134,133,134,133,134,133,133,133,133,133,133,133
,133,133,134,134,134,134,134,134,134,134,1,1,1,1,1,1,1,1,1,1
,1,1,1,1,1,1,1,1,0,1,1,44,1,45,1,1,1,1,1,1
,1,1,1,1,1,1,1,1,1,1,1,116,116,116,116,116,116,116,116,116
,116,116,116,116,116,116,116,116,115,116,115,46,116,47,116,48,49,50,51,52
,53,54,55,56,116,116,116,116,116,116,116,116,118,118,118,118,118,118,118,118
,118,118,118,118,118,118,118,118,118,117,118,117,0,118,0,118,41,41,41,41
,41,71,72,0,0,118,118,118,118,118,118,118,118,110,110,110,110,110,110,110
,110,110,110,110,110,110,110,110,110,110,43,110,43,42,110,42,110,42,42,42
,42,42,42,42,42,42,109,109,109,109,109,110,110,110,112,112,112,112,112,112
,112,112,112,112,112,112,112,112,112,112,112,0,112,0,0,112,0,112,61,61
,61,61,61,0,0,0,0,111,111,111,111,111,112,112,112,108,108,108,108,108
,108,108,108,108,108,108,108,108,108,108,108,107,60,108,0,58,108,59,108,62
,62,62,62,62,0,0,0,0,57,57,57,57,57,108,108,108,106,106,106,106
,106,106,106,106,106,106,106,106,106,106,106,105,0,0,106,0,0,106,0,106
,63,63,63,63,63,64,64,64,64,64,0,0,0,0,106,106,106,104,104,104
,104,104,104,104,104,104,104,104,104,104,104,103,0,0,0,104,0,0,104,0
,104,102,102,102,102,102,102,102,102,102,102,102,102,102,101,104,104,104,0,102
,0,0,102,0,102,100,100,100,100,100,100,100,100,100,100,100,100,99,0,102
,102,102,0,100,0,0,100,0,100,98,98,98,98,98,98,98,98,98,98,98
,97,0,0,100,100,100,0,98,0,0,98,0,98,96,96,96,96,96,96,96
,96,96,96,95,0,0,0,98,98,98,0,96,0,0,96,0,96,94,94,94
,94,94,94,94,94,94,93,0,0,0,0,96,96,96,0,94,0,0,94,0
,94,92,92,92,92,92,92,92,92,91,65,65,65,65,65,94,94,94,0,92
,0,0,92,0,92,90,90,90,90,90,90,90,89,66,67,68,69,70,0,92
,92,92,0,90,0,0,90,0,90,88,88,88,88,88,88,87,86,86,86,86
,86,85,0,90,90,90,0,88,0,0,88,0,88,0,86,0,0,86,0,86
,84,84,84,84,83,0,0,88,88,88,82,82,82,81,86,86,86,0,84,0
,0,84,0,84,80,80,79,0,82,0,0,82,0,82,78,77,0,0,84,84
,84,0,80,0,0,80,0,80,82,82,82,0,78,0,0,78,0,78,75,0
,0,0,80,80,80,74,0,0,74,0,74,0,78,78,78,0,76,0,0,76
,0,76,0,0,0,73,73,74,0,0,0,0,0,0,0,0,76,76,76
};

static slk_size_t Parse_row[] = {0

,1928,1,42,83,124,165,206,247,288,329,370,411,452,493,534,575
,616,657,698,739,780,821,862,903,944,985,1026,1067,1108,1149,1190,1231
,1272,1313,1354,1395,1436,1477,1518,2001,2051,1932,1969,2133,2083,2124,2165,2170
,2335,2358,2001,2485,2496,2472,2462,2448,2438,2414,2407,2383,2359,2335,2311,2287
,2263,2239,2215,2174,2133,2051,2092,1559,1969,2010,1600,1641,1682,1723,1764,1805
,1846,1887
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 42
#define END_OF_SLK_INPUT_ 41
#define START_STATE 0
#define START_CONFLICT 135
#define END_CONFLICT 135
#define START_ACTION 124
#define END_ACTION 160
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 65535
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) *--top = symbol
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)            self.peek(a)
#define get(self)               self.get()
#define mismatch(self,a,b)      self.mismatch(a,b)
#define no_entry(self,a,b,c)    self.no_entry(a,b,c)
#define input_left(self)        self.input_left()
#define message(self,a)         self.message(a)
#define predict(self,a)         self.predict(a)
#define reduce(self,a)          self.reduce(a)
#define state(self,a)           self.state(a)
#define execute(self,a)         self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType ( slk_size_t symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

slk_size_t *SlkGetProductionArray ( slk_size_t   production_number )
{
    return   &Production [ Production_row [production_number] ];
}

int SlkIsNonterminal ( slk_size_t symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

int SlkIsTerminal ( slk_size_t symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

int SlkIsAction ( slk_size_t symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

void SlkParse ( SlkAction  &action, 
                SlkToken   &tokens, 
                SlkError   &error, 
                slk_size_t  start_symbol ) 
{
 register
 slk_size_t  *top, *production;
 slk_size_t   production_number, entry, symbol, token, new_token;
 int          production_length, index, level;
 slk_size_t   stack [ PARSE_STACK_SIZE ];

 top = stack + (PARSE_STACK_SIZE-1);
 *top = 0;
 if ( ! start_symbol ) {
     start_symbol = START_SYMBOL;
 }
 SLK_PUSH ( start_symbol, stack, top );
 token = get(tokens);
 new_token = token;

 for ( symbol = SLK_POP ( top );  symbol;  ) {

     if ( symbol >= START_ACTION ) {
         execute ( action, (symbol-(START_ACTION-1)) );

     } else if ( symbol >= START_SYMBOL ) {
         entry = 0;
         level = 1;
         production_number = GET_CONDITIONAL_PRODUCTION ( symbol );
         if ( production_number ) {
             entry = get_predicted_entry ( tokens,
                                           production_number, token,
                                           level, 1 );
         }
         if ( ! entry ) {
             index = Parse_row [symbol - (START_SYMBOL-1)];
             index += token;
             entry = Parse [ index ];
         }
         while ( entry >= START_CONFLICT ) {
             index = Conflict_row [entry - (START_CONFLICT -1)];
             index += peek (tokens, level);
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry ) {
             production = &Production [ Production_row [entry] ];
             production_length = *production - 1;
             if ( *++production == symbol ) {
                 predict ( action, entry );
                 production += production_length;
                 for (;  production_length-- > 0;  --production ) {
                     SLK_PUSH ( *production, stack, top );
                 }
             } else {
                 new_token = no_entry ( error, symbol, token, level-1 );
             }
         } else {
             new_token = no_entry ( error, symbol, token, level-1 );
         }
     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = get(tokens);
             new_token = token;
         } else {
             new_token = mismatch ( error, symbol, token );
         }
     }
     if ( token != new_token ) {
         if ( new_token ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }
     symbol = SLK_POP ( top );
 }
 if ( token != END_OF_SLK_INPUT_ ) {
     input_left ( error );
 }
}

