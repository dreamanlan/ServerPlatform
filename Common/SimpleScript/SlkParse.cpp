
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = {0

,2,55,56 ,3,56,57,106 ,3,57,74,148 ,3,58,75,148 ,3,59,76,148 
,3,60,77,148 ,3,61,78,148 ,3,62,79,148 ,3,63,80,148 
,3,64,81,148 ,3,65,82,148 ,3,66,83,148 ,3,67,84,148 
,3,68,85,148 ,3,69,86,148 ,3,70,87,148 ,3,71,88,148 
,3,72,89,148 ,3,73,90,148 ,3,74,75,107 ,3,75,76,108 
,3,76,77,109 ,3,77,78,110 ,3,78,79,111 ,3,79,80,112 
,3,80,81,113 ,3,81,82,114 ,3,82,83,115 ,3,83,84,116 
,3,84,85,117 ,3,85,86,118 ,3,86,87,119 ,3,87,88,120 
,3,88,89,121 ,3,89,90,122 ,3,90,92,123 ,3,91,92,148 
,3,92,153,93 ,2,93,124 ,4,93,154,95,125 ,4,94,104,155,126 
,2,95,96 ,6,96,156,18,56,19,127 ,6,96,158,20,56,21,128 
,4,96,22,97,129 ,4,96,23,98,130 ,4,96,24,99,131 ,6,96,159,25,56,19,132 
,6,96,160,26,56,21,133 ,6,96,161,27,56,28,134 ,4,96,29,100,135 
,4,96,30,101,136 ,4,96,31,102,137 ,4,96,32,103,138 ,6,96,162,33,56,28,139 
,5,96,163,34,164,140 ,6,96,165,35,56,36,141 ,6,96,166,37,56,38,142 
,6,96,167,39,56,40,143 ,6,96,168,41,56,42,144 ,6,96,169,43,56,44,145 
,6,96,170,45,56,46,146 ,6,96,171,47,56,48,147 ,7,97,172,153,154,104,173,148 
,5,97,174,18,56,19 ,5,97,175,20,56,21 ,5,97,176,33,56,28 
,7,98,177,153,154,104,173,148 ,5,98,178,18,56,19 ,5,98,179,20,56,21 
,5,98,180,33,56,28 ,7,99,181,153,154,104,173,148 ,7,100,182,153,154,104,173,148 
,7,101,183,153,154,104,173,148 ,7,102,184,153,154,104,173,148 
,7,103,185,153,154,104,173,148 ,3,104,49,149 ,3,104,50,186 
,3,104,51,187 ,2,105,52 ,2,105,53 ,4,106,105,57,106 ,1,106 
,6,107,1,149,150,58,107 ,1,107 ,6,108,2,149,150,59,108 
,1,108 ,6,109,3,149,150,60,109 ,1,109 ,10,110,4,149,151,61,4,149,152,61,110 
,1,110 ,6,111,5,149,150,62,111 ,1,111 ,6,112,6,149,150,63,112 
,1,112 ,6,113,7,149,150,64,113 ,1,113 ,6,114,8,149,150,65,114 
,1,114 ,6,115,9,149,150,66,115 ,1,115 ,6,116,10,149,150,67,116 
,1,116 ,6,117,11,149,150,68,117 ,1,117 ,6,118,12,149,150,69,118 
,1,118 ,6,119,13,149,150,70,119 ,1,119 ,6,120,14,149,150,71,120 
,1,120 ,6,121,15,149,150,72,121 ,1,121 ,6,122,16,149,150,73,122 
,1,122 ,6,123,17,149,150,91,123 ,1,123 ,4,124,154,94,124 
,1,124 ,4,125,154,94,125 ,1,125 ,2,126,96 ,1,126 ,3,127,157,96 
,1,127 ,3,128,157,96 ,1,128 ,3,129,157,96 ,1,129 ,3,130,157,96 
,1,130 ,3,131,157,96 ,1,131 ,3,132,157,96 ,1,132 ,3,133,157,96 
,1,133 ,3,134,157,96 ,1,134 ,3,135,157,96 ,1,135 ,3,136,157,96 
,1,136 ,3,137,157,96 ,1,137 ,3,138,157,96 ,1,138 ,3,139,157,96 
,1,139 ,3,140,157,96 ,1,140 ,3,141,157,96 ,1,141 ,3,142,157,96 
,1,142 ,3,143,157,96 ,1,143 ,3,144,157,96 ,1,144 ,3,145,157,96 
,1,145 ,3,146,157,96 ,1,146 ,3,147,157,96 ,1,147 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,155,160,165,168,175,182,187,192,197
,204,211,218,223,228,233,238,245,251,258,265,272,279,286,293,300
,308,314,320,326,334,340,346,352,360,368,376,384,392,396,400,404
,407,410,415,417,424,426,433,435,442,444,455,457,464,466,473,475
,482,484,491,493,500,502,509,511,518,520,527,529,536,538,545,547
,554,556,563,565,572,574,579,581,586,588,591,593,597,599,603,605
,609,611,615,617,621,623,627,629,633,635,639,641,645,647,651,653
,657,659,663,665,669,671,675,677,681,683,687,689,693,695,699,701
,705,707,711,713,717
,0};

static slk_size_t Parse[] = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,39
,40,39,40,40,40,40,40,40,39,40,40,40,40,40,40,40,39,40,39,40
,39,40,39,40,39,40,39,40,39,39,39,39,39,39,39,123,123,123,123,123
,123,123,123,123,123,123,123,123,123,123,123,123,122,123,122,123,122,122,122,122
,122,122,123,122,122,122,122,122,122,122,123,122,123,122,123,122,123,122,123,122
,123,122,123,123,123,123,123,123,123,125,125,125,125,125,125,125,125,125,125,125
,125,125,125,125,125,125,124,125,124,125,124,124,124,124,124,124,125,124,124,124
,124,124,124,124,125,124,125,124,125,124,125,124,125,124,125,124,125,125,125,125
,125,125,125,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127
,126,127,126,127,126,126,126,126,126,126,127,126,126,126,126,126,126,126,127,126
,127,126,127,126,127,126,127,126,127,126,127,127,127,127,127,127,127,129,129,129
,129,129,129,129,129,129,129,129,129,129,129,129,129,129,128,129,128,129,128,128
,128,128,128,128,129,128,128,128,128,128,128,128,129,128,129,128,129,128,129,128
,129,128,129,128,129,129,129,129,129,129,129,131,131,131,131,131,131,131,131,131
,131,131,131,131,131,131,131,131,130,131,130,131,130,130,130,130,130,130,131,130
,130,130,130,130,130,130,131,130,131,130,131,130,131,130,131,130,131,130,131,131
,131,131,131,131,131,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
,133,133,132,133,132,133,132,132,132,132,132,132,133,132,132,132,132,132,132,132
,133,132,133,132,133,132,133,132,133,132,133,132,133,133,133,133,133,133,133,135
,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,134,135,134,135
,134,134,134,134,134,134,135,134,134,134,134,134,134,134,135,134,135,134,135,134
,135,134,135,134,135,134,135,135,135,135,135,135,135,137,137,137,137,137,137,137
,137,137,137,137,137,137,137,137,137,137,136,137,136,137,136,136,136,136,136,136
,137,136,136,136,136,136,136,136,137,136,137,136,137,136,137,136,137,136,137,136
,137,137,137,137,137,137,137,139,139,139,139,139,139,139,139,139,139,139,139,139
,139,139,139,139,138,139,138,139,138,138,138,138,138,138,139,138,138,138,138,138
,138,138,139,138,139,138,139,138,139,138,139,138,139,138,139,139,139,139,139,139
,139,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,140,141
,140,141,140,140,140,140,140,140,141,140,140,140,140,140,140,140,141,140,141,140
,141,140,141,140,141,140,141,140,141,141,141,141,141,141,141,143,143,143,143,143
,143,143,143,143,143,143,143,143,143,143,143,143,142,143,142,143,142,142,142,142
,142,142,143,142,142,142,142,142,142,142,143,142,143,142,143,142,143,142,143,142
,143,142,143,143,143,143,143,143,143,145,145,145,145,145,145,145,145,145,145,145
,145,145,145,145,145,145,144,145,144,145,144,144,144,144,144,144,145,144,144,144
,144,144,144,144,145,144,145,144,145,144,145,144,145,144,145,144,145,145,145,145
,145,145,145,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147
,146,147,146,147,146,146,146,146,146,146,147,146,146,146,146,146,146,146,147,146
,147,146,147,146,147,146,147,146,147,146,147,147,147,147,147,147,147,149,149,149
,149,149,149,149,149,149,149,149,149,149,149,149,149,149,148,149,148,149,148,148
,148,148,148,148,149,148,148,148,148,148,148,148,149,148,149,148,149,148,149,148
,149,148,149,148,149,149,149,149,149,149,149,151,151,151,151,151,151,151,151,151
,151,151,151,151,151,151,151,151,150,151,150,151,150,150,150,150,150,150,151,150
,150,150,150,150,150,150,151,150,151,150,151,150,151,150,151,150,151,150,151,151
,151,151,151,151,151,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153
,153,153,152,153,152,153,152,152,152,152,152,152,153,152,152,152,152,152,152,152
,153,152,153,152,153,152,153,152,153,152,153,152,153,153,153,153,153,153,153,155
,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,154,155,154,155
,154,154,154,154,154,154,155,154,154,154,154,154,154,154,155,154,155,154,155,154
,155,154,155,154,155,154,155,155,155,155,155,155,155,157,157,157,157,157,157,157
,157,157,157,157,157,157,157,157,157,157,156,157,156,157,156,156,156,156,156,156
,157,156,156,156,156,156,156,156,157,156,157,156,157,156,157,156,157,156,157,156
,157,157,157,157,157,157,157,159,159,159,159,159,159,159,159,159,159,159,159,159
,159,159,159,159,158,159,158,159,158,158,158,158,158,158,159,158,158,158,158,158
,158,158,159,158,159,158,159,158,159,158,159,158,159,158,159,159,159,159,159,159
,159,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,160,161
,160,161,160,160,160,160,160,160,161,160,160,160,160,160,160,160,161,160,161,160
,161,160,161,160,161,160,161,160,161,161,161,161,161,161,161,163,163,163,163,163
,163,163,163,163,163,163,163,163,163,163,163,163,162,163,162,163,162,162,162,162
,162,162,163,162,162,162,162,162,162,162,163,162,163,162,163,162,163,162,163,162
,163,162,163,163,163,163,163,163,163,165,165,165,165,165,165,165,165,165,165,165
,165,165,165,165,165,165,164,165,164,165,164,164,164,164,164,164,165,164,164,164
,164,164,164,164,165,164,165,164,165,164,165,164,165,164,165,164,165,165,165,165
,165,165,165,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1
,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,119,119,119
,119,119,119,119,119,119,119,119,119,119,119,119,119,119,42,119,42,119,42,42
,42,42,42,42,119,42,42,42,42,42,42,42,119,42,119,42,119,42,119,42
,119,42,119,42,119,118,118,118,119,119,119,121,121,121,121,121,121,121,121,121
,121,121,121,121,121,121,121,121,43,121,44,121,45,46,47,48,49,50,121,51
,52,53,54,55,56,57,121,58,121,59,121,60,121,61,121,62,121,63,121,120
,120,120,121,121,121,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117
,117,116,65,117,66,117,41,41,41,72,72,72,117,73,73,73,0,67,80,81
,117,0,117,0,117,0,117,0,117,0,117,0,117,64,64,64,117,117,117,115
,115,115,115,115,115,115,115,115,115,115,115,115,115,115,114,0,69,115,70,115
,74,74,74,75,75,75,115,76,76,76,0,71,0,0,115,0,115,0,115,0
,115,0,115,0,115,0,115,68,68,68,115,115,115,113,113,113,113,113,113,113
,113,113,113,113,113,113,113,112,83,0,83,113,0,113,77,78,79,83,0,0
,113,0,0,0,0,83,0,83,113,83,113,83,113,83,113,83,113,83,113,0
,113,82,82,83,113,113,113,111,111,111,111,111,111,111,111,111,111,111,111,111
,110,0,0,0,0,111,0,111,0,0,0,0,0,0,111,0,0,0,0,0
,0,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,0,0,111,111
,111,109,109,109,109,109,109,109,109,109,109,109,109,108,0,0,0,0,0,109
,0,109,0,0,0,0,0,0,109,0,0,0,0,0,0,0,109,0,109,0
,109,0,109,0,109,0,109,0,109,0,0,0,109,109,109,107,107,107,107,107
,107,107,107,107,107,107,106,0,0,0,0,0,0,107,0,107,0,0,0,0
,0,0,107,0,0,0,0,0,0,0,107,0,107,0,107,0,107,0,107,0
,107,0,107,0,0,0,107,107,107,105,105,105,105,105,105,105,105,105,105,104
,0,0,0,0,0,0,0,105,0,105,0,0,0,0,0,0,105,0,0,0
,0,0,0,0,105,0,105,0,105,0,105,0,105,0,105,0,105,0,0,0
,105,105,105,103,103,103,103,103,103,103,103,103,102,0,0,0,0,0,0,0
,0,103,0,103,0,0,0,0,0,0,103,0,0,0,0,0,0,0,103,0
,103,0,103,0,103,0,103,0,103,0,103,0,0,0,103,103,103,101,101,101
,101,101,101,101,101,100,0,0,0,0,0,0,0,0,0,101,0,101,0,0
,0,0,0,0,101,0,0,0,0,0,0,0,101,0,101,0,101,0,101,0
,101,0,101,0,101,0,0,0,101,101,101,99,99,99,99,99,99,99,98,0
,0,0,0,0,0,0,0,0,0,99,0,99,0,0,0,0,0,0,99,97
,97,97,97,97,97,96,99,0,99,0,99,0,99,0,99,0,99,97,99,97
,0,0,99,99,99,0,97,95,95,95,95,95,94,0,97,0,97,0,97,0
,97,0,97,0,97,95,97,95,0,0,97,97,97,0,95,93,93,93,93,92
,0,0,95,0,95,0,95,0,95,0,95,0,95,93,95,93,0,0,95,95
,95,0,93,91,91,91,90,0,0,0,93,0,93,0,93,0,93,0,93,0
,93,91,93,91,0,0,93,93,93,0,91,89,89,88,0,0,0,0,91,0
,91,0,91,0,91,0,91,0,91,89,91,89,0,0,91,91,91,0,89,87
,86,0,0,0,0,0,89,0,89,0,89,0,89,0,89,0,89,87,89,87
,0,84,89,89,89,0,87,0,0,0,0,0,0,0,87,0,87,0,87,85
,87,85,87,0,87,0,87,0,85,0,87,87,87,0,0,0,85,0,85,0
,85,0,85,0,85,0,85,0,85,0,0,0,85,85,85
};

static slk_size_t Parse_row[] = {0

,3241,1,55,109,163,217,271,325,379,433,487,541,595,649,703,757
,811,865,919,973,1027,1081,1135,1189,1243,1297,1351,1405,1459,1513,1567,1621
,1675,1729,1783,1837,1891,1945,1999,3376,3295,3349,3403,3457,3379,3383,3430,3433
,3437,3484,3385,3508,4079,4057,4029,4001,3973,3945,3917,3889,3835,3781,3727,3673
,3619,3565,3511,3457,3403,3295,3349,2053,2107,2161,2215,2269,2323,2377,2431,2485
,2539,2593,2647,2701,2755,2809,2863,2917,2971,3025,3079,3133,3187
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 55
#define END_OF_SLK_INPUT_ 54
#define START_STATE 0
#define START_CONFLICT 166
#define END_CONFLICT 166
#define START_ACTION 148
#define END_ACTION 188
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 65535
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) *--top = symbol
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)            self.peek(a)
#define get(self)               self.get()
#define mismatch(self,a,b)      self.mismatch(a,b)
#define no_entry(self,a,b,c)    self.no_entry(a,b,c)
#define input_left(self)        self.input_left()
#define message(self,a)         self.message(a)
#define predict(self,a)         self.predict(a)
#define reduce(self,a)          self.reduce(a)
#define state(self,a)           self.state(a)
#define execute(self,a)         self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType ( slk_size_t symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

slk_size_t *SlkGetProductionArray ( slk_size_t   production_number )
{
    return   &Production [ Production_row [production_number] ];
}

int SlkIsNonterminal ( slk_size_t symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

int SlkIsTerminal ( slk_size_t symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

int SlkIsAction ( slk_size_t symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

void SlkParse ( SlkAction  &action, 
                SlkToken   &tokens, 
                SlkError   &error, 
                slk_size_t  start_symbol ) 
{
 register
 slk_size_t  *top, *production;
 slk_size_t   production_number, entry, symbol, token, new_token;
 int          production_length, index, level;
 slk_size_t   stack [ PARSE_STACK_SIZE ];

 top = stack + (PARSE_STACK_SIZE-1);
 *top = 0;
 if ( ! start_symbol ) {
     start_symbol = START_SYMBOL;
 }
 SLK_PUSH ( start_symbol, stack, top );
 token = get(tokens);
 new_token = token;

 for ( symbol = SLK_POP ( top );  symbol;  ) {

     if ( symbol >= START_ACTION ) {
         execute ( action, (symbol-(START_ACTION-1)) );

     } else if ( symbol >= START_SYMBOL ) {
         entry = 0;
         level = 1;
         production_number = GET_CONDITIONAL_PRODUCTION ( symbol );
         if ( production_number ) {
             entry = get_predicted_entry ( tokens,
                                           production_number, token,
                                           level, 1 );
         }
         if ( ! entry ) {
             index = Parse_row [symbol - (START_SYMBOL-1)];
             index += token;
             entry = Parse [ index ];
         }
         while ( entry >= START_CONFLICT ) {
             index = Conflict_row [entry - (START_CONFLICT -1)];
             index += peek (tokens, level);
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry ) {
             production = &Production [ Production_row [entry] ];
             production_length = *production - 1;
             if ( *++production == symbol ) {
                 predict ( action, entry );
                 production += production_length;
                 for (;  production_length-- > 0;  --production ) {
                     SLK_PUSH ( *production, stack, top );
                 }
             } else {
                 new_token = no_entry ( error, symbol, token, level-1 );
             }
         } else {
             new_token = no_entry ( error, symbol, token, level-1 );
         }
     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = get(tokens);
             new_token = token;
         } else {
             new_token = mismatch ( error, symbol, token );
         }
     }
     if ( token != new_token ) {
         if ( new_token ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }
     symbol = SLK_POP ( top );
 }
 if ( token != END_OF_SLK_INPUT_ ) {
     input_left ( error );
 }
}

