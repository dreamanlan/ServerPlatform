
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = {0

,2,53,54 ,3,54,55,109 ,3,55,73,149 ,3,56,73,149 ,3,57,74,149 
,3,58,76,149 ,3,59,77,149 ,3,60,79,149 ,3,61,80,149 
,3,62,81,149 ,3,63,82,149 ,3,64,83,149 ,3,65,84,149 
,3,66,85,149 ,3,67,86,149 ,3,68,87,149 ,3,69,88,149 
,3,70,89,149 ,3,71,90,149 ,3,72,91,149 ,3,73,74,110 
,3,74,75,111 ,3,75,76,112 ,3,76,77,113 ,3,77,78,114 
,3,78,79,115 ,3,79,80,116 ,3,80,81,117 ,3,81,82,118 
,3,82,83,119 ,3,83,84,120 ,3,84,85,121 ,3,85,86,122 
,3,86,87,123 ,3,87,88,124 ,3,88,89,125 ,3,89,90,126 
,3,90,91,127 ,3,91,93,128 ,3,92,93,149 ,3,93,155,94 
,2,94,129 ,4,94,156,96,130 ,4,95,107,157,131 ,2,96,97 
,2,97,98 ,2,97,99 ,6,98,158,20,54,21,132 ,6,98,160,22,54,23,133 
,6,98,161,24,54,25,134 ,5,98,162,26,163,135 ,6,98,164,27,54,28,136 
,6,98,165,29,54,30,137 ,6,98,166,31,54,32,138 ,6,98,167,33,54,34,139 
,6,98,168,35,54,36,140 ,6,98,169,37,54,38,141 ,6,98,170,39,54,40,142 
,4,99,41,100,143 ,4,99,42,101,144 ,4,99,43,102,145 ,4,99,44,103,146 
,4,99,45,104,147 ,3,100,171,105 ,3,101,172,105 ,3,102,173,105 
,3,103,174,105 ,3,104,175,105 ,5,105,155,156,106,149 ,3,106,107,157 
,5,106,158,20,54,21 ,5,106,160,22,54,23 ,5,106,161,24,54,25 
,4,106,162,26,163 ,5,106,164,27,54,28 ,5,106,165,29,54,30 
,5,106,166,31,54,32 ,5,106,167,33,54,34 ,5,106,168,35,54,36 
,5,106,169,37,54,38 ,5,106,170,39,54,40 ,3,107,46,150 
,3,107,47,176 ,3,107,48,177 ,3,107,49,178 ,3,108,50,179 
,3,108,51,180 ,5,109,108,148,55,109 ,1,109 ,5,110,1,150,151,56 
,1,110 ,5,111,2,150,151,57 ,1,111 ,6,112,3,150,151,58,112 
,1,112 ,6,113,4,150,151,59,113 ,1,113 ,9,114,5,150,152,59,4,150,153,59 
,1,114 ,6,115,6,150,151,60,115 ,1,115 ,6,116,7,150,151,61,116 
,1,116 ,6,117,8,150,151,62,117 ,1,117 ,6,118,9,150,151,63,118 
,1,118 ,6,119,10,150,151,64,119 ,1,119 ,6,120,11,150,151,65,120 
,1,120 ,6,121,12,150,151,66,121 ,1,121 ,6,122,13,150,151,67,122 
,1,122 ,6,123,14,150,151,68,123 ,1,123 ,6,124,15,150,151,69,124 
,1,124 ,6,125,16,150,151,70,125 ,1,125 ,6,126,17,150,151,71,126 
,1,126 ,6,127,18,150,151,72,127 ,1,127 ,6,128,19,150,154,92,128 
,1,128 ,4,129,156,95,129 ,1,129 ,4,130,156,95,130 ,1,130 
,2,131,97 ,1,131 ,3,132,159,97 ,1,132 ,3,133,159,97 ,1,133 
,3,134,159,97 ,1,134 ,3,135,159,97 ,1,135 ,3,136,159,97 
,1,136 ,3,137,159,97 ,1,137 ,3,138,159,97 ,1,138 ,3,139,159,97 
,1,139 ,3,140,159,97 ,1,140 ,3,141,159,97 ,1,141 ,3,142,159,97 
,1,142 ,3,143,159,97 ,1,143 ,3,144,159,97 ,1,144 ,3,145,159,97 
,1,145 ,3,146,159,97 ,1,146 ,3,147,159,97 ,1,147 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,156,160,164,167,172,177,180,183,186
,193,200,207,213,220,227,234,241,248,255,262,267,272,277,282,287
,291,295,299,303,307,313,317,323,329,335,340,346,352,358,364,370
,376,382,386,390,394,398,402,406,412,414,420,422,428,430,437,439
,446,448,458,460,467,469,476,478,485,487,494,496,503,505,512,514
,521,523,530,532,539,541,548,550,557,559,566,568,575,577,584,586
,591,593,598,600,603,605,609,611,615,617,621,623,627,629,633,635
,639,641,645,647,651,653,657,659,663,665,669,671,675,677,681,683
,687,689,693,695,699
,0};

static slk_size_t Parse[] = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40
,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40
,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40
,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41
,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42
,42,42,43,42,43,42,43,42,43,43,42,43,42,43,42,43,42,43,42,43
,42,43,42,43,43,43,43,43,42,42,42,42,42,42,42,133,133,133,133,133
,133,133,133,133,133,133,133,133,133,133,133,133,133,133,132,133,132,133,132,133
,132,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,132,132,132,132
,133,133,133,133,133,133,133,135,135,135,135,135,135,135,135,135,135,135,135,135
,135,135,135,135,135,135,134,135,134,135,134,135,134,134,135,134,135,134,135,134
,135,134,135,134,135,134,135,134,134,134,134,134,135,135,135,135,135,135,135,137
,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,136,137
,136,137,136,137,136,136,137,136,137,136,137,136,137,136,137,136,137,136,137,136
,136,136,136,136,137,137,137,137,137,137,137,139,139,139,139,139,139,139,139,139
,139,139,139,139,139,139,139,139,139,139,138,139,138,139,138,139,138,138,139,138
,139,138,139,138,139,138,139,138,139,138,139,138,138,138,138,138,139,139,139,139
,139,139,139,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141
,141,141,140,141,140,141,140,141,140,140,141,140,141,140,141,140,141,140,141,140
,141,140,141,140,140,140,140,140,141,141,141,141,141,141,141,143,143,143,143,143
,143,143,143,143,143,143,143,143,143,143,143,143,143,143,142,143,142,143,142,143
,142,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,142,142,142,142
,143,143,143,143,143,143,143,145,145,145,145,145,145,145,145,145,145,145,145,145
,145,145,145,145,145,145,144,145,144,145,144,145,144,144,145,144,145,144,145,144
,145,144,145,144,145,144,145,144,144,144,144,144,145,145,145,145,145,145,145,147
,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,146,147
,146,147,146,147,146,146,147,146,147,146,147,146,147,146,147,146,147,146,147,146
,146,146,146,146,147,147,147,147,147,147,147,149,149,149,149,149,149,149,149,149
,149,149,149,149,149,149,149,149,149,149,148,149,148,149,148,149,148,148,149,148
,149,148,149,148,149,148,149,148,149,148,149,148,148,148,148,148,149,149,149,149
,149,149,149,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151
,151,151,150,151,150,151,150,151,150,150,151,150,151,150,151,150,151,150,151,150
,151,150,151,150,150,150,150,150,151,151,151,151,151,151,151,153,153,153,153,153
,153,153,153,153,153,153,153,153,153,153,153,153,153,153,152,153,152,153,152,153
,152,152,153,152,153,152,153,152,153,152,153,152,153,152,153,152,152,152,152,152
,153,153,153,153,153,153,153,155,155,155,155,155,155,155,155,155,155,155,155,155
,155,155,155,155,155,155,154,155,154,155,154,155,154,154,155,154,155,154,155,154
,155,154,155,154,155,154,155,154,154,154,154,154,155,155,155,155,155,155,155,157
,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,156,157
,156,157,156,157,156,156,157,156,157,156,157,156,157,156,157,156,157,156,157,156
,156,156,156,156,157,157,157,157,157,157,157,159,159,159,159,159,159,159,159,159
,159,159,159,159,159,159,159,159,159,159,158,159,158,159,158,159,158,158,159,158
,159,158,159,158,159,158,159,158,159,158,159,158,158,158,158,158,159,159,159,159
,159,159,159,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161
,161,161,160,161,160,161,160,161,160,160,161,160,161,160,161,160,161,160,161,160
,161,160,161,160,160,160,160,160,161,161,161,161,161,161,161,163,163,163,163,163
,163,163,163,163,163,163,163,163,163,163,163,163,163,163,162,163,162,163,162,163
,162,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,162,162,162,162
,163,163,163,163,163,163,163,165,165,165,165,165,165,165,165,165,165,165,165,165
,165,165,165,165,165,165,164,165,164,165,164,165,164,164,165,164,165,164,165,164
,165,164,165,164,165,164,165,164,164,164,164,164,165,165,165,165,165,165,165,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1
,1,1,1,1,1,1,1,1,1,1,1,129,129,129,129,129,129,129,129,129
,129,129,129,129,129,129,129,129,129,129,45,129,45,129,45,129,45,45,129,45
,129,45,129,45,129,45,129,45,129,45,129,45,45,45,45,45,128,128,128,128
,129,129,129,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131
,131,131,46,131,46,131,46,131,46,46,131,46,131,46,131,46,131,46,131,46
,131,46,131,47,47,47,47,47,130,130,130,130,131,131,131,127,127,127,127,127
,127,127,127,127,127,127,127,127,127,127,127,127,127,126,64,127,64,127,64,127
,64,64,127,64,127,64,127,64,127,64,127,64,127,64,127,59,60,61,62,63
,64,64,64,64,127,127,127,125,125,125,125,125,125,125,125,125,125,125,125,125
,125,125,125,125,124,0,65,125,65,125,65,125,65,65,125,65,125,65,125,65
,125,65,125,65,125,65,125,44,44,44,44,0,65,65,65,65,125,125,125,123
,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,122,86,87,66,123
,66,123,66,123,66,66,123,66,123,66,123,66,123,66,123,66,123,66,123,82
,83,84,85,0,66,66,66,66,123,123,123,121,121,121,121,121,121,121,121,121
,121,121,121,121,121,121,120,0,0,0,67,121,67,121,67,121,67,67,121,67
,121,67,121,67,121,67,121,67,121,67,121,0,0,0,0,0,67,67,67,67
,121,121,121,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118,0,0
,0,0,68,119,68,119,68,119,68,68,119,68,119,68,119,68,119,68,119,68
,119,68,119,0,0,0,0,0,68,68,68,68,119,119,119,117,117,117,117,117
,117,117,117,117,117,117,117,117,116,0,0,0,0,0,69,117,69,117,69,117
,69,69,117,69,117,69,117,69,117,69,117,69,117,69,117,0,0,0,0,0
,69,69,69,69,117,117,117,115,115,115,115,115,115,115,115,115,115,115,115,114
,0,0,0,0,0,0,71,115,72,115,73,115,74,75,115,76,115,77,115,78
,115,79,115,80,115,81,115,0,0,0,0,0,70,70,70,70,115,115,115,113
,113,113,113,113,113,113,113,113,113,113,112,0,0,0,0,0,0,0,48,113
,49,113,50,113,51,52,113,53,113,54,113,55,113,56,113,57,113,58,113,0
,0,0,0,0,0,0,0,0,113,113,113,111,111,111,111,111,111,111,111,111
,111,110,0,0,0,0,0,0,0,0,0,111,0,111,0,111,0,0,111,0
,111,0,111,0,111,0,111,0,111,0,111,0,0,0,0,0,0,0,0,0
,111,111,111,109,109,109,109,109,109,109,109,109,108,0,0,0,0,0,0,0
,0,0,0,109,0,109,0,109,0,0,109,0,109,0,109,0,109,0,109,0
,109,0,109,107,107,107,107,107,107,107,107,106,109,109,109,0,0,0,0,0
,0,0,0,107,0,107,0,107,0,0,107,0,107,0,107,0,107,0,107,0
,107,0,107,105,105,105,105,105,105,105,104,0,107,107,107,0,0,0,0,0
,0,0,0,105,0,105,0,105,0,0,105,0,105,0,105,0,105,0,105,0
,105,0,105,103,103,103,103,103,103,102,0,0,105,105,105,0,0,0,0,0
,0,0,0,103,0,103,0,103,0,0,103,0,103,0,103,0,103,0,103,0
,103,0,103,101,101,101,101,101,100,0,0,0,103,103,103,0,0,0,0,0
,0,0,0,101,0,101,0,101,0,0,101,0,101,0,101,0,101,0,101,0
,101,0,101,99,99,99,99,98,0,0,0,0,101,101,101,0,0,0,0,0
,0,0,0,99,0,99,0,99,0,0,99,0,99,0,99,0,99,0,99,0
,99,0,99,97,97,97,96,0,0,0,0,0,99,99,99,0,0,0,0,0
,0,0,0,97,0,97,0,97,0,0,97,0,97,0,97,0,97,0,97,0
,97,0,97,95,95,94,0,0,0,0,0,0,97,97,97,0,0,0,0,0
,0,0,0,95,0,95,0,95,0,0,95,0,95,0,95,0,95,0,95,0
,95,0,95,93,92,0,0,0,0,0,0,0,95,95,95,0,0,0,0,0
,0,0,0,93,0,93,0,93,0,0,93,0,93,0,93,90,93,0,93,0
,93,0,93,0,0,0,0,0,0,0,0,0,93,93,93,91,0,91,0,91
,0,0,91,0,91,0,91,0,91,0,91,0,91,0,91,0,0,0,0,0
,0,0,0,0,91,91,91,89,0,89,0,89,0,0,89,0,89,0,89,0
,89,0,89,0,89,0,89,0,0,0,0,0,0,0,0,0,88,88,89
};

static slk_size_t Parse_row[] = {0

,3017,1,53,105,157,209,261,313,365,417,469,521,573,625,677,729
,781,833,885,937,989,1041,1093,1145,1197,1249,1301,1353,1405,1457,1509,1561
,1613,1665,1717,1769,1821,1873,1925,1977,2029,2081,3220,3069,3121,3537,3173,3173
,3225,3277,3329,3381,3433,3485,3272,3245,4025,3993,3961,3921,3881,3841,3801,3761
,3721,3681,3641,3589,3537,3485,3433,3381,3329,3277,3225,3173,3069,3121,2133,2185
,2237,2289,2341,2393,2445,2497,2549,2601,2653,2705,2757,2809,2861,2913,2965
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 53
#define END_OF_SLK_INPUT_ 52
#define START_STATE 0
#define START_CONFLICT 166
#define END_CONFLICT 166
#define START_ACTION 148
#define END_ACTION 181
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 65535
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) { *--top = symbol; } else { message( error, "stack overflow\n", tokens ); }
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)                   self.peek(a)
#define get(self)                      self.get()
#define mismatch(self,a,b,c)           self.mismatch(a,b,c)
#define no_entry(self,a,b,c,d,e)       self.no_entry(a,b,c,d,e)
#define input_left(self,a)             self.input_left(a)
#define message(self,a,b)              self.message(a,b)
#define predict(self,a,b,c,d,e,f,g,h)  self.predict(a,b,c,d,e,f,g,h)
#define reduce(self,a)                 self.reduce(a)
#define state(self,a)                  self.state(a)
#define execute(self,a)                self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType(slk_size_t symbol)
{
    int   symbol_type = NOT_A_SYMBOL;

    if (symbol >= START_ACTION && symbol < END_ACTION) {
        symbol_type = ACTION_SYMBOL;
    }
    else if (symbol >= START_SYMBOL) {
        symbol_type = NONTERMINAL_SYMBOL;
    }
    else if (symbol > 0) {
        symbol_type = TERMINAL_SYMBOL;
    }
    return  symbol_type;
}

slk_size_t* SlkGetProductionArray(slk_size_t   production_number)
{
    return   &Production[Production_row[production_number]];
}

int SlkIsNonterminal(slk_size_t symbol)
{
    return (symbol >= START_SYMBOL && symbol < START_ACTION);
}

int SlkIsTerminal(slk_size_t symbol)
{
    return (symbol > 0 && symbol < START_SYMBOL);
}

int SlkIsAction(slk_size_t symbol)
{
    return (symbol >= START_ACTION && symbol < END_ACTION);
}

void SlkParse(SlkAction& action,
    SlkToken& tokens,
    SlkError& error,
    slk_size_t  start_symbol)
{
    slk_size_t* top, * production;
    slk_size_t   production_number, entry, symbol, token, new_token;
    int          production_length, index, level;
    slk_size_t   stack[PARSE_STACK_SIZE];

    top = stack + (PARSE_STACK_SIZE - 1);
    *top = 0;
    if (!start_symbol) {
        start_symbol = START_SYMBOL;
    }
    SLK_PUSH(start_symbol, stack, top);
    token = get(tokens);
    new_token = token;

    for (symbol = SLK_POP(top); symbol; ) {

        if (symbol >= START_ACTION) {
            execute(action, (symbol - (START_ACTION - 1)));

        }
        else if (symbol >= START_SYMBOL) {
            entry = 0;
            level = 1;
            production_number = GET_CONDITIONAL_PRODUCTION(symbol);
            if (production_number) {
                entry = get_predicted_entry(tokens,
                    production_number, token,
                    level, 1);
            }
            if (!entry) {
                index = Parse_row[symbol - (START_SYMBOL - 1)];
                index += token;
                entry = Parse[index];
            }
            while (entry >= START_CONFLICT) {
                index = Conflict_row[entry - (START_CONFLICT - 1)];
                index += peek(tokens, level);
                entry = Conflict[index];
                ++level;
            }
            if (entry) {
                production = &Production[Production_row[entry]];
                production_length = *production - 1;
                if (*++production == symbol) {
                    predict(action, entry, symbol, token, level - 1, tokens.getLastToken(), tokens.getLastLineNumber(), tokens.getCurToken(), tokens.getLineNumber());
                    production += production_length;
                    for (; production_length-- > 0; --production) {
                        SLK_PUSH(*production, stack, top);
                    }
                }
                else {
                    new_token = no_entry(error, entry, symbol, token, level - 1, tokens);
                }
            }
            else {
                new_token = no_entry(error, entry, symbol, token, level - 1, tokens);
            }
        }
        else if (symbol > 0) {
            if (symbol == token) {
                token = get(tokens);
                new_token = token;
            }
            else {
                new_token = mismatch(error, symbol, token, tokens);
            }
        }
        else {
            message(error, "\n parser error: symbol value 0\n", tokens);
        }
        if (token != new_token) {
            if (new_token) {
                token = new_token;
            }
            if (token != END_OF_SLK_INPUT_) {
                continue;
            }
        }
        symbol = SLK_POP(top);
    }
    if (token != END_OF_SLK_INPUT_) {
        input_left(error, tokens);
    }
}

