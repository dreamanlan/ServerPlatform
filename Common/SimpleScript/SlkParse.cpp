
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = { 0

,2,57,58 ,3,58,59,109 ,3,59,76,153 ,3,60,76,153 ,3,61,77,153 
,3,62,79,153 ,3,63,80,153 ,3,64,82,153 ,3,65,83,153 
,3,66,84,153 ,3,67,85,153 ,3,68,86,153 ,3,69,87,153 
,3,70,88,153 ,3,71,89,153 ,3,72,90,153 ,3,73,91,153 
,3,74,92,153 ,3,75,93,153 ,3,76,77,110 ,3,77,78,111 
,3,78,79,112 ,3,79,80,113 ,3,80,81,114 ,3,81,82,115 
,3,82,83,116 ,3,83,84,117 ,3,84,85,118 ,3,85,86,119 
,3,86,87,120 ,3,87,88,121 ,3,88,89,122 ,3,89,90,123 
,3,90,91,124 ,3,91,92,125 ,3,92,93,126 ,3,93,95,127 
,3,94,95,153 ,3,95,158,96 ,2,96,128 ,4,96,159,98,129 
,4,97,107,160,130 ,2,98,99 ,6,99,161,19,58,20,131 ,6,99,163,21,58,22,132 
,4,99,23,100,133 ,4,99,24,101,134 ,4,99,25,102,135 ,6,99,164,26,58,20,136 
,6,99,165,27,58,22,137 ,6,99,166,28,58,29,138 ,4,99,30,103,139 
,4,99,31,104,140 ,4,99,32,105,141 ,4,99,33,106,142 ,6,99,167,34,58,29,143 
,5,99,168,35,169,144 ,6,99,170,36,58,37,145 ,6,99,171,38,58,39,146 
,6,99,172,40,58,41,147 ,6,99,173,42,58,43,148 ,6,99,174,44,58,45,149 
,6,99,175,46,58,47,150 ,6,99,176,48,58,49,151 ,7,100,177,158,159,107,178,153 
,5,100,179,19,58,20 ,5,100,180,21,58,22 ,5,100,181,34,58,29 
,7,101,182,158,159,107,178,153 ,5,101,183,19,58,20 ,5,101,184,21,58,22 
,5,101,185,34,58,29 ,7,102,186,158,159,107,178,153 ,7,103,187,158,159,107,178,153 
,7,104,188,158,159,107,178,153 ,7,105,189,158,159,107,178,153 
,7,106,190,158,159,107,178,153 ,3,107,50,154 ,3,107,51,191 
,3,107,52,192 ,3,107,53,193 ,3,108,54,194 ,3,108,55,195 
,5,109,108,152,59,109 ,1,109 ,5,110,1,154,155,60 ,1,110 
,5,111,2,154,155,61 ,1,111 ,6,112,3,154,155,62,112 ,1,112 
,6,113,4,154,155,63,113 ,1,113 ,9,114,5,154,156,63,4,154,157,63 
,1,114 ,6,115,6,154,155,64,115 ,1,115 ,6,116,7,154,155,65,116 
,1,116 ,6,117,8,154,155,66,117 ,1,117 ,6,118,9,154,155,67,118 
,1,118 ,6,119,10,154,155,68,119 ,1,119 ,6,120,11,154,155,69,120 
,1,120 ,6,121,12,154,155,70,121 ,1,121 ,6,122,13,154,155,71,122 
,1,122 ,6,123,14,154,155,72,123 ,1,123 ,6,124,15,154,155,73,124 
,1,124 ,6,125,16,154,155,74,125 ,1,125 ,6,126,17,154,155,75,126 
,1,126 ,6,127,18,154,155,94,127 ,1,127 ,4,128,159,97,128 
,1,128 ,4,129,159,97,129 ,1,129 ,2,130,99 ,1,130 ,3,131,162,99 
,1,131 ,3,132,162,99 ,1,132 ,3,133,162,99 ,1,133 ,3,134,162,99 
,1,134 ,3,135,162,99 ,1,135 ,3,136,162,99 ,1,136 ,3,137,162,99 
,1,137 ,3,138,162,99 ,1,138 ,3,139,162,99 ,1,139 ,3,140,162,99 
,1,140 ,3,141,162,99 ,1,141 ,3,142,162,99 ,1,142 ,3,143,162,99 
,1,143 ,3,144,162,99 ,1,144 ,3,145,162,99 ,1,145 ,3,146,162,99 
,1,146 ,3,147,162,99 ,1,147 ,3,148,162,99 ,1,148 ,3,149,162,99 
,1,149 ,3,150,162,99 ,1,150 ,3,151,162,99 ,1,151 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,156,159,164,169,172,179,186,191,196
,201,208,215,222,227,232,237,242,249,255,262,269,276,283,290,297
,304,312,318,324,330,338,344,350,356,364,372,380,388,396,400,404
,408,412,416,420,426,428,434,436,442,444,451,453,460,462,472,474
,481,483,490,492,499,501,508,510,517,519,526,528,535,537,544,546
,553,555,562,564,571,573,580,582,589,591,596,598,603,605,608,610
,614,616,620,622,626,628,632,634,638,640,644,646,650,652,656,658
,662,664,668,670,674,676,680,682,686,688,692,694,698,700,704,706
,710,712,716,718,722,724,728,730,734
,0};

static slk_size_t Parse[] = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40
,40,40,40,40,40,40,40,40,40,41,40,41,40,41,41,41,41,41,41,40
,41,41,41,41,41,41,41,40,41,40,41,40,41,40,41,40,41,40,41,40
,40,40,40,40,40,40,40,127,127,127,127,127,127,127,127,127,127,127,127,127
,127,127,127,127,127,126,127,126,127,126,126,126,126,126,126,127,126,126,126,126
,126,126,126,127,126,127,126,127,126,127,126,127,126,127,126,127,127,127,127,127
,127,127,127,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129
,129,128,129,128,129,128,128,128,128,128,128,129,128,128,128,128,128,128,128,129
,128,129,128,129,128,129,128,129,128,129,128,129,129,129,129,129,129,129,129,131
,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,130,131,130
,131,130,130,130,130,130,130,131,130,130,130,130,130,130,130,131,130,131,130,131
,130,131,130,131,130,131,130,131,131,131,131,131,131,131,131,133,133,133,133,133
,133,133,133,133,133,133,133,133,133,133,133,133,133,132,133,132,133,132,132,132
,132,132,132,133,132,132,132,132,132,132,132,133,132,133,132,133,132,133,132,133
,132,133,132,133,133,133,133,133,133,133,133,135,135,135,135,135,135,135,135,135
,135,135,135,135,135,135,135,135,135,134,135,134,135,134,134,134,134,134,134,135
,134,134,134,134,134,134,134,135,134,135,134,135,134,135,134,135,134,135,134,135
,135,135,135,135,135,135,135,137,137,137,137,137,137,137,137,137,137,137,137,137
,137,137,137,137,137,136,137,136,137,136,136,136,136,136,136,137,136,136,136,136
,136,136,136,137,136,137,136,137,136,137,136,137,136,137,136,137,137,137,137,137
,137,137,137,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139
,139,138,139,138,139,138,138,138,138,138,138,139,138,138,138,138,138,138,138,139
,138,139,138,139,138,139,138,139,138,139,138,139,139,139,139,139,139,139,139,141
,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,140,141,140
,141,140,140,140,140,140,140,141,140,140,140,140,140,140,140,141,140,141,140,141
,140,141,140,141,140,141,140,141,141,141,141,141,141,141,141,143,143,143,143,143
,143,143,143,143,143,143,143,143,143,143,143,143,143,142,143,142,143,142,142,142
,142,142,142,143,142,142,142,142,142,142,142,143,142,143,142,143,142,143,142,143
,142,143,142,143,143,143,143,143,143,143,143,145,145,145,145,145,145,145,145,145
,145,145,145,145,145,145,145,145,145,144,145,144,145,144,144,144,144,144,144,145
,144,144,144,144,144,144,144,145,144,145,144,145,144,145,144,145,144,145,144,145
,145,145,145,145,145,145,145,147,147,147,147,147,147,147,147,147,147,147,147,147
,147,147,147,147,147,146,147,146,147,146,146,146,146,146,146,147,146,146,146,146
,146,146,146,147,146,147,146,147,146,147,146,147,146,147,146,147,147,147,147,147
,147,147,147,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149
,149,148,149,148,149,148,148,148,148,148,148,149,148,148,148,148,148,148,148,149
,148,149,148,149,148,149,148,149,148,149,148,149,149,149,149,149,149,149,149,151
,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,150,151,150
,151,150,150,150,150,150,150,151,150,150,150,150,150,150,150,151,150,151,150,151
,150,151,150,151,150,151,150,151,151,151,151,151,151,151,151,153,153,153,153,153
,153,153,153,153,153,153,153,153,153,153,153,153,153,152,153,152,153,152,152,152
,152,152,152,153,152,152,152,152,152,152,152,153,152,153,152,153,152,153,152,153
,152,153,152,153,153,153,153,153,153,153,153,155,155,155,155,155,155,155,155,155
,155,155,155,155,155,155,155,155,155,154,155,154,155,154,154,154,154,154,154,155
,154,154,154,154,154,154,154,155,154,155,154,155,154,155,154,155,154,155,154,155
,155,155,155,155,155,155,155,157,157,157,157,157,157,157,157,157,157,157,157,157
,157,157,157,157,157,156,157,156,157,156,156,156,156,156,156,157,156,156,156,156
,156,156,156,157,156,157,156,157,156,157,156,157,156,157,156,157,157,157,157,157
,157,157,157,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159
,159,158,159,158,159,158,158,158,158,158,158,159,158,158,158,158,158,158,158,159
,158,159,158,159,158,159,158,159,158,159,158,159,159,159,159,159,159,159,159,161
,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,160,161,160
,161,160,160,160,160,160,160,161,160,160,160,160,160,160,160,161,160,161,160,161
,160,161,160,161,160,161,160,161,161,161,161,161,161,161,161,163,163,163,163,163
,163,163,163,163,163,163,163,163,163,163,163,163,163,162,163,162,163,162,162,162
,162,162,162,163,162,162,162,162,162,162,162,163,162,163,162,163,162,163,162,163
,162,163,162,163,163,163,163,163,163,163,163,165,165,165,165,165,165,165,165,165
,165,165,165,165,165,165,165,165,165,164,165,164,165,164,164,164,164,164,164,165
,164,164,164,164,164,164,164,165,164,165,164,165,164,165,164,165,164,165,164,165
,165,165,165,165,165,165,165,167,167,167,167,167,167,167,167,167,167,167,167,167
,167,167,167,167,167,166,167,166,167,166,166,166,166,166,166,167,166,166,166,166
,166,166,166,167,166,167,166,167,166,167,166,167,166,167,166,167,167,167,167,167
,167,167,167,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169
,169,168,169,168,169,168,168,168,168,168,168,169,168,168,168,168,168,168,168,169
,168,169,168,169,168,169,168,169,168,169,168,169,169,169,169,169,169,169,169,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1
,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0
,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,123,123,123,123,123
,123,123,123,123,123,123,123,123,123,123,123,123,123,43,123,43,123,43,43,43
,43,43,43,123,43,43,43,43,43,43,43,123,43,123,43,123,43,123,43,123
,43,123,43,123,122,122,122,122,123,123,123,125,125,125,125,125,125,125,125,125
,125,125,125,125,125,125,125,125,125,44,125,45,125,46,47,48,49,50,51,125
,52,53,54,55,56,57,58,125,59,125,60,125,61,125,62,125,63,125,64,125
,124,124,124,124,125,125,125,121,121,121,121,121,121,121,121,121,121,121,121,121
,121,121,121,121,120,66,121,67,121,42,42,42,42,82,83,121,73,73,73,73
,68,0,0,121,0,121,0,121,0,121,0,121,0,121,0,121,65,65,65,65
,121,121,121,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,118
,0,70,119,71,119,74,74,74,74,0,0,119,75,75,75,75,72,0,0,119
,0,119,0,119,0,119,0,119,0,119,0,119,69,69,69,69,119,119,119,117
,117,117,117,117,117,117,117,117,117,117,117,117,117,117,116,85,0,85,117,0
,117,0,0,0,85,0,0,117,76,76,76,76,85,0,85,117,85,117,85,117
,85,117,85,117,85,117,0,117,0,84,84,85,117,117,117,115,115,115,115,115
,115,115,115,115,115,115,115,115,115,114,77,77,77,77,115,0,115,78,79,80
,81,0,0,115,0,0,0,0,0,0,0,115,0,115,0,115,0,115,0,115
,0,115,0,115,0,0,0,0,115,115,115,113,113,113,113,113,113,113,113,113
,113,113,113,113,112,0,0,0,0,0,113,0,113,0,0,0,0,0,0,113
,0,0,0,0,0,0,0,113,0,113,0,113,0,113,0,113,0,113,0,113
,0,0,0,0,113,113,113,111,111,111,111,111,111,111,111,111,111,111,111,110
,0,0,0,0,0,0,111,0,111,0,0,0,0,0,0,111,0,0,0,0
,0,0,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,0,0,0
,111,111,111,109,109,109,109,109,109,109,109,109,109,109,108,0,0,0,0,0
,0,0,109,0,109,0,0,0,0,0,0,109,0,0,0,0,0,0,0,109
,0,109,0,109,0,109,0,109,0,109,0,109,0,0,0,0,109,109,109,107
,107,107,107,107,107,107,107,107,107,106,0,0,0,0,0,0,0,0,107,0
,107,0,0,0,0,0,0,107,0,0,0,0,0,0,0,107,0,107,0,107
,0,107,0,107,0,107,0,107,0,0,0,0,107,107,107,105,105,105,105,105
,105,105,105,105,104,0,0,0,0,0,0,0,0,0,105,0,105,0,0,0
,0,0,0,105,0,0,0,0,0,0,0,105,0,105,0,105,0,105,0,105
,0,105,0,105,0,0,0,0,105,105,105,103,103,103,103,103,103,103,103,102
,0,0,0,0,0,0,0,0,0,0,103,0,103,0,0,0,0,0,0,103
,0,0,0,0,0,0,0,103,0,103,0,103,0,103,0,103,0,103,0,103
,0,0,0,0,103,103,103,101,101,101,101,101,101,101,100,0,0,0,0,0
,0,0,0,0,0,0,101,0,101,0,0,0,0,0,0,101,0,0,0,0
,0,0,0,101,0,101,0,101,0,101,0,101,0,101,0,101,0,0,0,0
,101,101,101,99,99,99,99,99,99,98,0,0,0,0,0,0,0,0,0,0
,0,0,99,0,99,97,97,97,97,97,96,99,0,0,0,0,0,0,0,99
,0,99,0,99,97,99,97,99,0,99,0,99,0,97,0,0,99,99,99,0
,0,97,0,97,0,97,0,97,0,97,0,97,0,97,0,0,0,0,97,97
,97,95,95,95,95,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,95,0,95,93,93,93,92,0,0,95,0,0,0,0,0,0,0,95,0,95
,0,95,93,95,93,95,0,95,0,95,0,93,0,0,95,95,95,0,0,93
,0,93,0,93,0,93,0,93,0,93,0,93,91,91,90,0,93,93,93,0
,0,0,0,0,0,0,0,0,0,0,0,91,0,91,89,88,0,0,0,0
,91,0,0,0,0,0,0,0,91,0,91,0,91,89,91,89,91,0,91,0
,91,0,89,0,86,91,91,91,0,0,89,0,89,0,89,0,89,0,89,0
,89,0,89,87,0,87,0,89,89,89,0,0,87,0,0,0,0,0,0,0
,87,0,87,0,87,0,87,0,87,0,87,0,87,0,0,0,0,87,87,87
};

static slk_size_t Parse_row[] = {0

,3417,1,57,113,169,225,281,337,393,449,505,561,617,673,729,785
,841,897,953,1009,1065,1121,1177,1233,1289,1345,1401,1457,1513,1569,1625,1681
,1737,1793,1849,1905,1961,2017,2073,2129,3558,3473,3529,3585,3641,3565,3614,3621
,3677,3719,3726,3558,3694,4402,4372,4350,4301,4279,4223,4201,4145,4089,4033,3977
,3921,3865,3809,3753,3697,3641,3585,3473,3529,2185,2241,2297,2353,2409,2465,2521
,2577,2633,2689,2745,2801,2857,2913,2969,3025,3081,3137,3193,3249,3305,3361
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 57
#define END_OF_SLK_INPUT_ 56
#define START_STATE 0
#define START_CONFLICT 170
#define END_CONFLICT 170
#define START_ACTION 152
#define END_ACTION 196
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 65535
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) { *--top = symbol; } else { message( error, "stack overflow\n", tokens ); }
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)                   self.peek(a)
#define get(self)                      self.get()
#define mismatch(self,a,b,c)           self.mismatch(a,b,c)
#define no_entry(self,a,b,c,d,e)       self.no_entry(a,b,c,d,e)
#define input_left(self,a)             self.input_left(a)
#define message(self,a,b)              self.message(a,b)
#define predict(self,a,b,c,d,e,f,g,h)  self.predict(a,b,c,d,e,f,g,h)
#define reduce(self,a)                 self.reduce(a)
#define state(self,a)                  self.state(a)
#define execute(self,a)                self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType(slk_size_t symbol)
{
    int   symbol_type = NOT_A_SYMBOL;

    if (symbol >= START_ACTION && symbol < END_ACTION) {
        symbol_type = ACTION_SYMBOL;
    }
    else if (symbol >= START_SYMBOL) {
        symbol_type = NONTERMINAL_SYMBOL;
    }
    else if (symbol > 0) {
        symbol_type = TERMINAL_SYMBOL;
    }
    return  symbol_type;
}

slk_size_t* SlkGetProductionArray(slk_size_t   production_number)
{
    return   &Production[Production_row[production_number]];
}

int SlkIsNonterminal(slk_size_t symbol)
{
    return (symbol >= START_SYMBOL && symbol < START_ACTION);
}

int SlkIsTerminal(slk_size_t symbol)
{
    return (symbol > 0 && symbol < START_SYMBOL);
}

int SlkIsAction(slk_size_t symbol)
{
    return (symbol >= START_ACTION && symbol < END_ACTION);
}

void SlkParse(SlkAction& action,
    SlkToken& tokens,
    SlkError& error,
    slk_size_t  start_symbol)
{
    slk_size_t* top, * production;
    slk_size_t   production_number, entry, symbol, token, new_token;
    int          production_length, index, level;
    slk_size_t   stack[PARSE_STACK_SIZE];

    top = stack + (PARSE_STACK_SIZE - 1);
    *top = 0;
    if (!start_symbol) {
        start_symbol = START_SYMBOL;
    }
    SLK_PUSH(start_symbol, stack, top);
    token = get(tokens);
    new_token = token;

    for (symbol = SLK_POP(top); symbol; ) {

        if (symbol >= START_ACTION) {
            execute(action, (symbol - (START_ACTION - 1)));

        }
        else if (symbol >= START_SYMBOL) {
            entry = 0;
            level = 1;
            production_number = GET_CONDITIONAL_PRODUCTION(symbol);
            if (production_number) {
                entry = get_predicted_entry(tokens,
                    production_number, token,
                    level, 1);
            }
            if (!entry) {
                index = Parse_row[symbol - (START_SYMBOL - 1)];
                index += token;
                entry = Parse[index];
            }
            while (entry >= START_CONFLICT) {
                index = Conflict_row[entry - (START_CONFLICT - 1)];
                index += peek(tokens, level);
                entry = Conflict[index];
                ++level;
            }
            if (entry) {
                production = &Production[Production_row[entry]];
                production_length = *production - 1;
                if (*++production == symbol) {
                    predict(action, entry, symbol, token, level - 1, tokens.getLastToken(), tokens.getLastLineNumber(), tokens.getCurToken(), tokens.getLineNumber());
                    production += production_length;
                    for (; production_length-- > 0; --production) {
                        SLK_PUSH(*production, stack, top);
                    }
                }
                else {
                    new_token = no_entry(error, entry, symbol, token, level - 1, tokens);
                }
            }
            else {
                new_token = no_entry(error, entry, symbol, token, level - 1, tokens);
            }
        }
        else if (symbol > 0) {
            if (symbol == token) {
                token = get(tokens);
                new_token = token;
            }
            else {
                new_token = mismatch(error, symbol, token, tokens);
            }
        }
        else {
            message(error, "\n parser error: symbol value 0\n", tokens);
        }
        if (token != new_token) {
            if (new_token) {
                token = new_token;
            }
            if (token != END_OF_SLK_INPUT_) {
                continue;
            }
        }
        symbol = SLK_POP(top);
    }
    if (token != END_OF_SLK_INPUT_) {
        input_left(error, tokens);
    }
}

