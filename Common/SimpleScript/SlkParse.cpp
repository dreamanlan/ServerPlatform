
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = {0

,2,56,57 ,3,57,58,108 ,3,58,75,152 ,3,59,75,152 ,3,60,76,152 
,3,61,78,152 ,3,62,79,152 ,3,63,81,152 ,3,64,82,152 
,3,65,83,152 ,3,66,84,152 ,3,67,85,152 ,3,68,86,152 
,3,69,87,152 ,3,70,88,152 ,3,71,89,152 ,3,72,90,152 
,3,73,91,152 ,3,74,92,152 ,3,75,76,109 ,3,76,77,110 
,3,77,78,111 ,3,78,79,112 ,3,79,80,113 ,3,80,81,114 
,3,81,82,115 ,3,82,83,116 ,3,83,84,117 ,3,84,85,118 
,3,85,86,119 ,3,86,87,120 ,3,87,88,121 ,3,88,89,122 
,3,89,90,123 ,3,90,91,124 ,3,91,92,125 ,3,92,94,126 
,3,93,94,152 ,3,94,157,95 ,2,95,127 ,4,95,158,97,128 
,4,96,106,159,129 ,2,97,98 ,6,98,160,19,57,20,130 ,6,98,162,21,57,22,131 
,4,98,23,99,132 ,4,98,24,100,133 ,4,98,25,101,134 ,6,98,163,26,57,20,135 
,6,98,164,27,57,22,136 ,6,98,165,28,57,29,137 ,4,98,30,102,138 
,4,98,31,103,139 ,4,98,32,104,140 ,4,98,33,105,141 ,6,98,166,34,57,29,142 
,5,98,167,35,168,143 ,6,98,169,36,57,37,144 ,6,98,170,38,57,39,145 
,6,98,171,40,57,41,146 ,6,98,172,42,57,43,147 ,6,98,173,44,57,45,148 
,6,98,174,46,57,47,149 ,6,98,175,48,57,49,150 ,7,99,176,157,158,106,177,152 
,5,99,178,19,57,20 ,5,99,179,21,57,22 ,5,99,180,34,57,29 
,7,100,181,157,158,106,177,152 ,5,100,182,19,57,20 ,5,100,183,21,57,22 
,5,100,184,34,57,29 ,7,101,185,157,158,106,177,152 ,7,102,186,157,158,106,177,152 
,7,103,187,157,158,106,177,152 ,7,104,188,157,158,106,177,152 
,7,105,189,157,158,106,177,152 ,3,106,50,153 ,3,106,51,190 
,3,106,52,191 ,3,107,53,192 ,3,107,54,193 ,5,108,107,151,58,108 
,1,108 ,5,109,1,153,154,59 ,1,109 ,5,110,2,153,154,60 
,1,110 ,6,111,3,153,154,61,111 ,1,111 ,6,112,4,153,154,62,112 
,1,112 ,9,113,5,153,155,62,4,153,156,62 ,1,113 ,6,114,6,153,154,63,114 
,1,114 ,6,115,7,153,154,64,115 ,1,115 ,6,116,8,153,154,65,116 
,1,116 ,6,117,9,153,154,66,117 ,1,117 ,6,118,10,153,154,67,118 
,1,118 ,6,119,11,153,154,68,119 ,1,119 ,6,120,12,153,154,69,120 
,1,120 ,6,121,13,153,154,70,121 ,1,121 ,6,122,14,153,154,71,122 
,1,122 ,6,123,15,153,154,72,123 ,1,123 ,6,124,16,153,154,73,124 
,1,124 ,6,125,17,153,154,74,125 ,1,125 ,6,126,18,153,154,93,126 
,1,126 ,4,127,158,96,127 ,1,127 ,4,128,158,96,128 ,1,128 
,2,129,98 ,1,129 ,3,130,161,98 ,1,130 ,3,131,161,98 ,1,131 
,3,132,161,98 ,1,132 ,3,133,161,98 ,1,133 ,3,134,161,98 
,1,134 ,3,135,161,98 ,1,135 ,3,136,161,98 ,1,136 ,3,137,161,98 
,1,137 ,3,138,161,98 ,1,138 ,3,139,161,98 ,1,139 ,3,140,161,98 
,1,140 ,3,141,161,98 ,1,141 ,3,142,161,98 ,1,142 ,3,143,161,98 
,1,143 ,3,144,161,98 ,1,144 ,3,145,161,98 ,1,145 ,3,146,161,98 
,1,146 ,3,147,161,98 ,1,147 ,3,148,161,98 ,1,148 ,3,149,161,98 
,1,149 ,3,150,161,98 ,1,150 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,156,159,164,169,172,179,186,191,196
,201,208,215,222,227,232,237,242,249,255,262,269,276,283,290,297
,304,312,318,324,330,338,344,350,356,364,372,380,388,396,400,404
,408,412,416,422,424,430,432,438,440,447,449,456,458,468,470,477
,479,486,488,495,497,504,506,513,515,522,524,531,533,540,542,549
,551,558,560,567,569,576,578,585,587,592,594,599,601,604,606,610
,612,616,618,622,624,628,630,634,636,640,642,646,648,652,654,658
,660,664,666,670,672,676,678,682,684,688,690,694,696,700,702,706
,708,712,714,718,720,724,726,730
,0};

static slk_size_t Parse[] = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40
,40,40,40,40,40,40,40,40,40,40,40,41,40,41,40,41,41,41,41,41
,41,40,41,41,41,41,41,41,41,40,41,40,41,40,41,40,41,40,41,40
,41,40,40,40,40,40,40,40,126,126,126,126,126,126,126,126,126,126,126,126
,126,126,126,126,126,126,125,126,125,126,125,125,125,125,125,125,126,125,125,125
,125,125,125,125,126,125,126,125,126,125,126,125,126,125,126,125,126,126,126,126
,126,126,126,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128
,128,127,128,127,128,127,127,127,127,127,127,128,127,127,127,127,127,127,127,128
,127,128,127,128,127,128,127,128,127,128,127,128,128,128,128,128,128,128,130,130
,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,129,130,129,130
,129,129,129,129,129,129,130,129,129,129,129,129,129,129,130,129,130,129,130,129
,130,129,130,129,130,129,130,130,130,130,130,130,130,132,132,132,132,132,132,132
,132,132,132,132,132,132,132,132,132,132,132,131,132,131,132,131,131,131,131,131
,131,132,131,131,131,131,131,131,131,132,131,132,131,132,131,132,131,132,131,132
,131,132,132,132,132,132,132,132,134,134,134,134,134,134,134,134,134,134,134,134
,134,134,134,134,134,134,133,134,133,134,133,133,133,133,133,133,134,133,133,133
,133,133,133,133,134,133,134,133,134,133,134,133,134,133,134,133,134,134,134,134
,134,134,134,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136
,136,135,136,135,136,135,135,135,135,135,135,136,135,135,135,135,135,135,135,136
,135,136,135,136,135,136,135,136,135,136,135,136,136,136,136,136,136,136,138,138
,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,137,138,137,138
,137,137,137,137,137,137,138,137,137,137,137,137,137,137,138,137,138,137,138,137
,138,137,138,137,138,137,138,138,138,138,138,138,138,140,140,140,140,140,140,140
,140,140,140,140,140,140,140,140,140,140,140,139,140,139,140,139,139,139,139,139
,139,140,139,139,139,139,139,139,139,140,139,140,139,140,139,140,139,140,139,140
,139,140,140,140,140,140,140,140,142,142,142,142,142,142,142,142,142,142,142,142
,142,142,142,142,142,142,141,142,141,142,141,141,141,141,141,141,142,141,141,141
,141,141,141,141,142,141,142,141,142,141,142,141,142,141,142,141,142,142,142,142
,142,142,142,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144
,144,143,144,143,144,143,143,143,143,143,143,144,143,143,143,143,143,143,143,144
,143,144,143,144,143,144,143,144,143,144,143,144,144,144,144,144,144,144,146,146
,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,145,146,145,146
,145,145,145,145,145,145,146,145,145,145,145,145,145,145,146,145,146,145,146,145
,146,145,146,145,146,145,146,146,146,146,146,146,146,148,148,148,148,148,148,148
,148,148,148,148,148,148,148,148,148,148,148,147,148,147,148,147,147,147,147,147
,147,148,147,147,147,147,147,147,147,148,147,148,147,148,147,148,147,148,147,148
,147,148,148,148,148,148,148,148,150,150,150,150,150,150,150,150,150,150,150,150
,150,150,150,150,150,150,149,150,149,150,149,149,149,149,149,149,150,149,149,149
,149,149,149,149,150,149,150,149,150,149,150,149,150,149,150,149,150,150,150,150
,150,150,150,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152
,152,151,152,151,152,151,151,151,151,151,151,152,151,151,151,151,151,151,151,152
,151,152,151,152,151,152,151,152,151,152,151,152,152,152,152,152,152,152,154,154
,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,153,154,153,154
,153,153,153,153,153,153,154,153,153,153,153,153,153,153,154,153,154,153,154,153
,154,153,154,153,154,153,154,154,154,154,154,154,154,156,156,156,156,156,156,156
,156,156,156,156,156,156,156,156,156,156,156,155,156,155,156,155,155,155,155,155
,155,156,155,155,155,155,155,155,155,156,155,156,155,156,155,156,155,156,155,156
,155,156,156,156,156,156,156,156,158,158,158,158,158,158,158,158,158,158,158,158
,158,158,158,158,158,158,157,158,157,158,157,157,157,157,157,157,158,157,157,157
,157,157,157,157,158,157,158,157,158,157,158,157,158,157,158,157,158,158,158,158
,158,158,158,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160
,160,159,160,159,160,159,159,159,159,159,159,160,159,159,159,159,159,159,159,160
,159,160,159,160,159,160,159,160,159,160,159,160,160,160,160,160,160,160,162,162
,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,161,162,161,162
,161,161,161,161,161,161,162,161,161,161,161,161,161,161,162,161,162,161,162,161
,162,161,162,161,162,161,162,162,162,162,162,162,162,164,164,164,164,164,164,164
,164,164,164,164,164,164,164,164,164,164,164,163,164,163,164,163,163,163,163,163
,163,164,163,163,163,163,163,163,163,164,163,164,163,164,163,164,163,164,163,164
,163,164,164,164,164,164,164,164,166,166,166,166,166,166,166,166,166,166,166,166
,166,166,166,166,166,166,165,166,165,166,165,165,165,165,165,165,166,165,165,165
,165,165,165,165,166,165,166,165,166,165,166,165,166,165,166,165,166,166,166,166
,166,166,166,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168
,168,167,168,167,168,167,167,167,167,167,167,168,167,167,167,167,167,167,167,168
,167,168,167,168,167,168,167,168,167,168,167,168,168,168,168,168,168,168,1,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0
,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1
,0,1,0,1,0,1,0,1,1,1,1,1,1,122,122,122,122,122,122,122
,122,122,122,122,122,122,122,122,122,122,122,43,122,43,122,43,43,43,43,43
,43,122,43,43,43,43,43,43,43,122,43,122,43,122,43,122,43,122,43,122
,43,122,121,121,121,122,122,122,124,124,124,124,124,124,124,124,124,124,124,124
,124,124,124,124,124,124,44,124,45,124,46,47,48,49,50,51,124,52,53,54
,55,56,57,58,124,59,124,60,124,61,124,62,124,63,124,64,124,123,123,123
,124,124,124,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120
,119,66,120,67,120,42,42,42,73,73,73,120,74,74,74,0,68,81,82,120
,0,120,0,120,0,120,0,120,0,120,0,120,65,65,65,120,120,120,118,118
,118,118,118,118,118,118,118,118,118,118,118,118,118,118,117,0,70,118,71,118
,75,75,75,76,76,76,118,77,77,77,0,72,0,0,118,0,118,0,118,0
,118,0,118,0,118,0,118,69,69,69,118,118,118,116,116,116,116,116,116,116
,116,116,116,116,116,116,116,116,115,84,0,84,116,0,116,78,79,80,84,0
,0,116,0,0,0,0,84,0,84,116,84,116,84,116,84,116,84,116,84,116
,0,116,83,83,84,116,116,116,114,114,114,114,114,114,114,114,114,114,114,114
,114,114,113,0,0,0,0,114,0,114,0,0,0,0,0,0,114,0,0,0
,0,0,0,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,0,0
,114,114,114,112,112,112,112,112,112,112,112,112,112,112,112,112,111,0,0,0
,0,0,112,0,112,0,0,0,0,0,0,112,0,0,0,0,0,0,0,112
,0,112,0,112,0,112,0,112,0,112,0,112,0,0,0,112,112,112,110,110
,110,110,110,110,110,110,110,110,110,110,109,0,0,0,0,0,0,110,0,110
,0,0,0,0,0,0,110,0,0,0,0,0,0,0,110,0,110,0,110,0
,110,0,110,0,110,0,110,0,0,0,110,110,110,108,108,108,108,108,108,108
,108,108,108,108,107,0,0,0,0,0,0,0,108,0,108,0,0,0,0,0
,0,108,0,0,0,0,0,0,0,108,0,108,0,108,0,108,0,108,0,108
,0,108,0,0,0,108,108,108,106,106,106,106,106,106,106,106,106,106,105,0
,0,0,0,0,0,0,0,106,0,106,0,0,0,0,0,0,106,0,0,0
,0,0,0,0,106,0,106,0,106,0,106,0,106,0,106,0,106,0,0,0
,106,106,106,104,104,104,104,104,104,104,104,104,103,0,0,0,0,0,0,0
,0,0,104,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,0,104
,0,104,0,104,0,104,0,104,0,104,0,104,0,0,0,104,104,104,102,102
,102,102,102,102,102,102,101,0,0,0,0,0,0,0,0,0,0,102,0,102
,0,0,0,0,0,0,102,0,0,0,0,0,0,0,102,0,102,0,102,0
,102,0,102,0,102,0,102,0,0,0,102,102,102,100,100,100,100,100,100,100
,99,0,0,0,0,0,0,0,0,0,0,0,100,0,100,0,0,0,0,0
,0,100,0,0,0,0,0,0,0,100,0,100,0,100,0,100,0,100,0,100
,0,100,0,0,0,100,100,100,98,98,98,98,98,98,97,0,0,0,0,0
,0,0,0,0,0,0,0,98,0,98,96,96,96,96,96,95,98,0,0,0
,0,0,0,0,98,0,98,0,98,96,98,96,98,0,98,0,98,0,96,0
,98,98,98,0,0,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0
,0,0,96,96,96,94,94,94,94,93,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,94,0,94,92,92,92,91,0,0,94,0,0,0,0,0,0
,0,94,0,94,0,94,92,94,92,94,0,94,0,94,0,92,0,94,94,94
,0,0,0,92,0,92,0,92,0,92,0,92,0,92,0,92,90,90,89,92
,92,92,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,90,88,87
,0,0,0,0,90,0,0,0,0,0,0,0,90,0,90,0,90,88,90,88
,90,0,90,0,90,0,88,0,90,90,90,0,0,0,88,85,88,0,88,0
,88,0,88,0,88,0,88,0,0,0,88,88,88,0,86,0,86,0,0,0
,0,0,0,86,0,0,0,0,0,0,0,86,0,86,0,86,0,86,0,86
,0,86,0,86,0,0,0,86,86,86
};

static slk_size_t Parse_row[] = {0

,3356,1,56,111,166,221,276,331,386,441,496,551,606,661,716,771
,826,881,936,991,1046,1101,1156,1211,1266,1321,1376,1431,1486,1541,1596,1651
,1706,1761,1816,1871,1926,1981,2036,2091,3494,3411,3466,3521,3576,3497,3501,3549
,3552,3556,3604,3503,3628,4333,4296,4274,4225,4203,4148,4126,4071,4016,3961,3906
,3851,3796,3741,3686,3631,3576,3521,3411,3466,2146,2201,2256,2311,2366,2421,2476
,2531,2586,2641,2696,2751,2806,2861,2916,2971,3026,3081,3136,3191,3246,3301
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 56
#define END_OF_SLK_INPUT_ 55
#define START_STATE 0
#define START_CONFLICT 169
#define END_CONFLICT 169
#define START_ACTION 151
#define END_ACTION 194
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 65535
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) { *--top = symbol; } else { message( error, "stack overflow\n", tokens ); }
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)                   self.peek(a)
#define get(self)                      self.get()
#define mismatch(self,a,b,c)           self.mismatch(a,b,c)
#define no_entry(self,a,b,c,d,e)       self.no_entry(a,b,c,d,e)
#define input_left(self,a)             self.input_left(a)
#define message(self,a,b)              self.message(a,b)
#define predict(self,a,b,c,d,e,f,g,h)  self.predict(a,b,c,d,e,f,g,h)
#define reduce(self,a)                 self.reduce(a)
#define state(self,a)                  self.state(a)
#define execute(self,a)                self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType ( slk_size_t symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

slk_size_t *SlkGetProductionArray ( slk_size_t   production_number )
{
    return   &Production [ Production_row [production_number] ];
}

int SlkIsNonterminal ( slk_size_t symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

int SlkIsTerminal ( slk_size_t symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

int SlkIsAction ( slk_size_t symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

void SlkParse ( SlkAction  &action, 
                SlkToken   &tokens, 
                SlkError   &error, 
                slk_size_t  start_symbol ) 
{
 slk_size_t  *top, *production;
 slk_size_t   production_number, entry, symbol, token, new_token;
 int          production_length, index, level;
 slk_size_t   stack [ PARSE_STACK_SIZE ];

 top = stack + (PARSE_STACK_SIZE-1);
 *top = 0;
 if ( ! start_symbol ) {
     start_symbol = START_SYMBOL;
 }
 SLK_PUSH ( start_symbol, stack, top );
 token = get(tokens);
 new_token = token;

 for ( symbol = SLK_POP ( top );  symbol;  ) {

     if ( symbol >= START_ACTION ) {
         execute ( action, (symbol-(START_ACTION-1)) );

     } else if ( symbol >= START_SYMBOL ) {
         entry = 0;
         level = 1;
         production_number = GET_CONDITIONAL_PRODUCTION ( symbol );
         if ( production_number ) {
             entry = get_predicted_entry ( tokens,
                                           production_number, token,
                                           level, 1 );
         }
         if ( ! entry ) {
             index = Parse_row [symbol - (START_SYMBOL-1)];
             index += token;
             entry = Parse [ index ];
         }
         while ( entry >= START_CONFLICT ) {
             index = Conflict_row [entry - (START_CONFLICT -1)];
             index += peek (tokens, level);
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry ) {
             production = &Production [ Production_row [entry] ];
             production_length = *production - 1;
             if ( *++production == symbol ) {
                 predict ( action, entry, symbol, token, level - 1, tokens.getLastToken(), tokens.getLastLineNumber(), tokens.getCurToken(), tokens.getLineNumber() );
                 production += production_length;
                 for (;  production_length-- > 0;  --production ) {
                     SLK_PUSH ( *production, stack, top );
                 }
             } else {
                 new_token = no_entry ( error, entry, symbol, token, level - 1, tokens );
             }
         } else {
             new_token = no_entry ( error, entry, symbol, token, level - 1, tokens );
         }
     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = get(tokens);
             new_token = token;
         } else {
             new_token = mismatch ( error, symbol, token, tokens );
         }
     } else {
         message(error, "\n parser error: symbol value 0\n", tokens);
     }
     if ( token != new_token ) {
         if ( new_token ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }
     symbol = SLK_POP ( top );
 }
 if ( token != END_OF_SLK_INPUT_ ) {
     input_left ( error, tokens );
 }
}

